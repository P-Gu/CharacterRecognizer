{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import sys\n",
    "import keras\n",
    "from keras.models import Sequential\n",
    "from keras.optimizers import Adadelta\n",
    "from keras.layers import Dense, Activation, Dropout, Flatten, Conv2D, MaxPooling2D, AveragePooling2D\n",
    "from keras.layers.normalization import BatchNormalization\n",
    "from keras import regularizers\n",
    "import numpy as np\n",
    "import os\n",
    "import matplotlib.pyplot as plt\n",
    "from keras.optimizers import Adam\n",
    "from keras.models import load_model\n",
    "\n",
    "from PIL import Image\n",
    "import cv2\n",
    "from sklearn.utils import shuffle\n",
    "import keras.metrics\n",
    "from tensorflow import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "from azureml.core.workspace import Workspace\n",
    "ws = Workspace.from_config()\n",
    "from azureml.core import Experiment\n",
    "experiment = Experiment(workspace=ws, name=\"Oct25Alex\")\n",
    "\n",
    "#!{sys.executable} -m pip install opencv-python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function for gamma correction\n",
    "def adjust_gamma(image, gamma=1.0):\n",
    "\n",
    "   invGamma = 1.0 / gamma\n",
    "   table = np.array([((i / 255.0) ** invGamma) * 255\n",
    "      for i in np.arange(0, 256)]).astype(\"uint8\")\n",
    "\n",
    "   return cv2.LUT(image, table)\n",
    "\n",
    "# Function for image rotation (not used)\n",
    "def rotate_image(image, angle):\n",
    "  image_center = tuple(np.array(image.shape[1::-1]) / 2)\n",
    "  rot_mat = cv2.getRotationMatrix2D(image_center, angle, 1.0)\n",
    "  result = cv2.warpAffine(image, rot_mat, image.shape[1::-1], flags=cv2.INTER_LINEAR)\n",
    "  return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# load the trained model\n",
    "modeln = load_model(\"more_preprocess.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[4.5860141e-10 4.7902277e-12 9.9972385e-01 4.9022333e-07 1.9805366e-06\n",
      "  2.6764495e-05 2.4401781e-04 2.1457627e-07 5.5805081e-09 2.6106636e-06]]\n",
      "0.99972385\n",
      "[2]\n"
     ]
    }
   ],
   "source": [
    "# test individual photos with the trained model\n",
    "img = cv2.imread(\"anime_photos/IMG_2745.jpg\")         \n",
    "img = cv2.resize(img,(227,227))\n",
    "img = np.asarray(img)\n",
    "img = img.astype(np.float32)\n",
    "img = (img / 127.5) - 1\n",
    "img = np.expand_dims(img, axis=0)\n",
    "\n",
    "predict = modeln.predict(img)\n",
    "prob = np.amax(predict)\n",
    "print(predict)\n",
    "print(prob)\n",
    "print(np.where(predict == prob)[1])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(0,)\n"
     ]
    }
   ],
   "source": [
    "# Transform dataset into a numpy array. Perform preprocessing\n",
    "\n",
    "X=[]\n",
    "Y=[]\n",
    "resize = 227\n",
    "labelSet = set()\n",
    "\n",
    "for root, dirs, files in os.walk(\"faces/003_fate_testarossa\", topdown=True):\n",
    "    label = os.path.basename(root)[2]\n",
    "    for file in files:\n",
    "        if file!=\".DS_Store\" and file!=\"color.csv\":\n",
    "            print(label)\n",
    "            labelSet.add(label)\n",
    "            img = cv2.imread(os.path.join(root,file))         \n",
    "            img = cv2.resize(img,(resize,resize))            # resize the image to (227, 227, 3), required by AlexNet\n",
    "\n",
    "            '''\n",
    "            rows, cols, ch = img.shape                        # This chunk of code tilts the image,\n",
    "            pts1 = np.float32(                                  details can be found at \n",
    "                [[cols*.25, rows*.95],                          https://stackoverflow.com/questions/33497736/opencv-adjusting-photo-with-skew-angle-tilt\n",
    "                 [cols*.90, rows*.95],\n",
    "                 [cols*.10, 0],\n",
    "                 [cols,     0]]\n",
    "            )\n",
    "            pts2 = np.float32(\n",
    "                [[cols*0.1, rows],\n",
    "                 [cols,     rows],\n",
    "                 [0,        0],\n",
    "                 [cols,     0]]\n",
    "            )    \n",
    "            M = cv2.getPerspectiveTransform(pts1,pts2)\n",
    "            dst = cv2.warpPerspective(img, M, (cols, rows))\n",
    "            dst = np.asarray(dst)\n",
    "            '''\n",
    "            rotateImg = img     \n",
    "            rotateImgC = cv2.rotate(rotateImg, cv2.ROTATE_90_CLOCKWISE)    # Clockwise and counterclockwise rotation\n",
    "            rotateImgC = rotateImgC.astype(np.float32) \n",
    "            rotateImgC = (rotateImgC / 127.5) - 1\n",
    "            X.append(rotateImgC)\n",
    "            Y.append(label)\n",
    "            rotateImgCC = cv2.rotate(rotateImg, cv2.ROTATE_90_COUNTERCLOCKWISE)\n",
    "            rotateImgCC = rotateImgCC.astype(np.float32) \n",
    "            rotateImgCC = (rotateImgCC / 127.5) - 1\n",
    "            X.append(rotateImgCC)\n",
    "            Y.append(label)\n",
    "            '''\n",
    "            flipImg = cv2.flip(img, 1)\n",
    "            flipImg = flipImg.astype(np.float32)            \n",
    "            flipImg = (flipImg / 127.5) - 1\n",
    "            X.append(flipImg)\n",
    "            Y.append(label)\n",
    "            '''\n",
    "            for g in range(1,5):              \n",
    "                gamma = g/2\n",
    "                newImg = adjust_gamma(img, gamma=gamma)               # Adjust illumination, gamma is one of 0.5, 1, 1.5, 2\n",
    "                newImg = cv2.cvtColor(newImg, cv2.COLOR_BGR2RGB)      # BGR to RGB\n",
    "                newImg = np.asarray(newImg)\n",
    "                \n",
    "                newImg = newImg.astype(np.float32)\n",
    "                newImg = (newImg / 127.5) - 1\n",
    "                X.append(newImg)\n",
    "                Y.append(label)\n",
    "                newImg = np.fliplr(newImg)    # Flip the image\n",
    "                X.append(newImg)\n",
    "                Y.append(label)\n",
    "\n",
    "X = np.asarray(X)\n",
    "print(X.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "a = X[1700,:,:,:]\n",
    "a = (a+1)*127.5\n",
    "a = a.astype(np.int)\n",
    "#print(a.shape)\n",
    "b = a[...,::-1].copy()    # bgr to rgb from np array\n",
    "#print(b)\n",
    "plt.imshow(b)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# The entire AlexNet architecture\n",
    "\n",
    "def alex():\n",
    "    #Instantiate an empty model\n",
    "    model = Sequential()\n",
    "\n",
    "    # 1st Convolutional Layer\n",
    "    model.add(Conv2D(filters=96, input_shape=(227,227,3), kernel_size=(11,11), strides=(4,4), padding='valid'))#, kernel_regularizer=regularizers.l2(0.01)))\n",
    "    model.add(Activation('relu'))\n",
    "    # Max Pooling\n",
    "    model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2), padding='valid'))\n",
    "\n",
    "    # 2nd Convolutional Layer\n",
    "    model.add(Conv2D(filters=256, kernel_size=(5,5), strides=(1,1), padding='same'))#, kernel_regularizer=regularizers.l2(0.01)))\n",
    "    model.add(Activation('relu'))\n",
    "    # Max Pooling\n",
    "    model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2), padding='valid'))\n",
    "\n",
    "    # 3rd Convolutional Layer\n",
    "    model.add(Conv2D(filters=384, kernel_size=(3,3), strides=(1,1), padding='same'))#, kernel_regularizer=regularizers.l2(0.01)))\n",
    "    model.add(Activation('relu'))\n",
    "\n",
    "    # 4th Convolutional Layer\n",
    "    model.add(Conv2D(filters=384, kernel_size=(3,3), strides=(1,1), padding='same'))#, kernel_regularizer=regularizers.l2(0.01)))\n",
    "    model.add(Activation('relu'))\n",
    "\n",
    "    # 5th Convolutional Layer\n",
    "    model.add(Conv2D(filters=256, kernel_size=(3,3), strides=(1,1), padding='same'))#, kernel_regularizer=regularizers.l2(0.01)))\n",
    "    model.add(Activation('relu'))\n",
    "    # Max Pooling\n",
    "    model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2), padding='valid'))\n",
    "\n",
    "    model.add(Dropout(0.5))\n",
    "    # Passing it to a Fully Connected layer\n",
    "    model.add(Flatten())\n",
    "    # 1st Fully Connected Layer\n",
    "    model.add(Dense(4096, input_shape=(227*227*3,)))#, kernel_regularizer=regularizers.l2(0.01)))\n",
    "    model.add(Activation('relu'))\n",
    "    # Add Dropout to prevent overfitting\n",
    "    model.add(Dropout(0.5))\n",
    "\n",
    "    # 2nd Fully Connected Layer\n",
    "    model.add(Dense(4096))#, kernel_regularizer=regularizers.l2(0.01)))\n",
    "    model.add(Activation('relu'))\n",
    "    # Add Dropout\n",
    "    model.add(Dropout(0.5))\n",
    "\n",
    "    # 3rd Fully Connected Layer\n",
    "    model.add(Dense(1000))#, kernel_regularizer=regularizers.l2(0.01)))\n",
    "    model.add(Activation('relu'))\n",
    "\n",
    "    # Output Layer\n",
    "    model.add(Dense(len(labelList)))#, kernel_regularizer=regularizers.l2(0.01)))\n",
    "    model.add(Activation('softmax'))\n",
    "\n",
    "    model.summary()\n",
    "\n",
    "    # Compile the model\n",
    "    opt = Adadelta(learning_rate = 0.005, rho = 0.97)\n",
    "    #model.compile(loss=keras.losses.mean_squared_error, optimizer=opt, metrics=[\"recall\"])\n",
    "    model.compile(loss='mse', optimizer=opt, metrics=['categorical_accuracy'])\n",
    "    \n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 0 0 ... 0 0 0]\n",
      " [1 0 0 ... 0 0 0]\n",
      " [1 0 0 ... 0 0 0]\n",
      " ...\n",
      " [0 0 0 ... 0 0 1]\n",
      " [0 0 0 ... 0 0 1]\n",
      " [0 0 0 ... 0 0 1]]\n",
      "['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n"
     ]
    }
   ],
   "source": [
    "# One-hot encoding (not exactly)\n",
    "\n",
    "labelList = list(labelSet)\n",
    "labelList.sort()\n",
    "\n",
    "for i in range(len(Y)):\n",
    "   #This is not one-hot\n",
    "   l = [0]*len(labelList)\n",
    "   index = labelList.index(Y[i])\n",
    "   l[index] = 1\n",
    "   Y[i] = l\n",
    "\n",
    "Y = np.asarray(Y)\n",
    "\n",
    "# Shuffling\n",
    "\n",
    "np.random.seed(1001)\n",
    "random.set_seed(1001)\n",
    "p = np.random.permutation(X.shape[0])\n",
    "Xn = X[p]\n",
    "Yn = Y[p]\n",
    "\n",
    "print(Y)\n",
    "print(labelList)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 0 0 0]\n",
      " [0 0 0 1]\n",
      " [0 0 0 1]\n",
      " ...\n",
      " [1 0 0 0]\n",
      " [1 0 0 0]\n",
      " [0 1 0 0]]\n"
     ]
    }
   ],
   "source": [
    "print(Yn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Separate training set and test set\n",
    "trainPercent = 0.85\n",
    "\n",
    "X_train = Xn[:int(Xn.shape[0]*trainPercent),:,:,:]\n",
    "X_test = Xn[int(Xn.shape[0]*trainPercent):,:,:,:]\n",
    "Y_train = Yn[:int(Yn.shape[0]*trainPercent),:]\n",
    "Y_test = Yn[int(Yn.shape[0]*trainPercent):,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "lines_to_next_cell": 0,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv2d_1 (Conv2D)            (None, 55, 55, 96)        34944     \n",
      "_________________________________________________________________\n",
      "activation_1 (Activation)    (None, 55, 55, 96)        0         \n",
      "_________________________________________________________________\n",
      "max_pooling2d_1 (MaxPooling2 (None, 27, 27, 96)        0         \n",
      "_________________________________________________________________\n",
      "conv2d_2 (Conv2D)            (None, 27, 27, 256)       614656    \n",
      "_________________________________________________________________\n",
      "activation_2 (Activation)    (None, 27, 27, 256)       0         \n",
      "_________________________________________________________________\n",
      "max_pooling2d_2 (MaxPooling2 (None, 13, 13, 256)       0         \n",
      "_________________________________________________________________\n",
      "conv2d_3 (Conv2D)            (None, 13, 13, 384)       885120    \n",
      "_________________________________________________________________\n",
      "activation_3 (Activation)    (None, 13, 13, 384)       0         \n",
      "_________________________________________________________________\n",
      "conv2d_4 (Conv2D)            (None, 13, 13, 384)       1327488   \n",
      "_________________________________________________________________\n",
      "activation_4 (Activation)    (None, 13, 13, 384)       0         \n",
      "_________________________________________________________________\n",
      "conv2d_5 (Conv2D)            (None, 13, 13, 256)       884992    \n",
      "_________________________________________________________________\n",
      "activation_5 (Activation)    (None, 13, 13, 256)       0         \n",
      "_________________________________________________________________\n",
      "max_pooling2d_3 (MaxPooling2 (None, 6, 6, 256)         0         \n",
      "_________________________________________________________________\n",
      "dropout_1 (Dropout)          (None, 6, 6, 256)         0         \n",
      "_________________________________________________________________\n",
      "flatten_1 (Flatten)          (None, 9216)              0         \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 4096)              37752832  \n",
      "_________________________________________________________________\n",
      "activation_6 (Activation)    (None, 4096)              0         \n",
      "_________________________________________________________________\n",
      "dropout_2 (Dropout)          (None, 4096)              0         \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 4096)              16781312  \n",
      "_________________________________________________________________\n",
      "activation_7 (Activation)    (None, 4096)              0         \n",
      "_________________________________________________________________\n",
      "dropout_3 (Dropout)          (None, 4096)              0         \n",
      "_________________________________________________________________\n",
      "dense_3 (Dense)              (None, 1000)              4097000   \n",
      "_________________________________________________________________\n",
      "activation_8 (Activation)    (None, 1000)              0         \n",
      "_________________________________________________________________\n",
      "dense_4 (Dense)              (None, 10)                10010     \n",
      "_________________________________________________________________\n",
      "activation_9 (Activation)    (None, 10)                0         \n",
      "=================================================================\n",
      "Total params: 62,388,354\n",
      "Trainable params: 62,388,354\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "Epoch 1/1000\n",
      " - 38s - loss: 0.0900 - categorical_accuracy: 0.1010\n",
      "Epoch 2/1000\n",
      " - 21s - loss: 0.0899 - categorical_accuracy: 0.1110\n",
      "Epoch 3/1000\n",
      " - 21s - loss: 0.0899 - categorical_accuracy: 0.1111\n",
      "Epoch 4/1000\n",
      " - 21s - loss: 0.0899 - categorical_accuracy: 0.1190\n",
      "Epoch 5/1000\n",
      " - 21s - loss: 0.0898 - categorical_accuracy: 0.1226\n",
      "Epoch 6/1000\n",
      " - 21s - loss: 0.0898 - categorical_accuracy: 0.1323\n",
      "Epoch 7/1000\n",
      " - 21s - loss: 0.0898 - categorical_accuracy: 0.1380\n",
      "Epoch 8/1000\n",
      " - 21s - loss: 0.0898 - categorical_accuracy: 0.1319\n",
      "Epoch 9/1000\n",
      " - 21s - loss: 0.0897 - categorical_accuracy: 0.1368\n",
      "Epoch 10/1000\n",
      " - 21s - loss: 0.0897 - categorical_accuracy: 0.1440\n",
      "Epoch 11/1000\n",
      " - 21s - loss: 0.0897 - categorical_accuracy: 0.1476\n",
      "Epoch 12/1000\n",
      " - 21s - loss: 0.0896 - categorical_accuracy: 0.1502\n",
      "Epoch 13/1000\n",
      " - 21s - loss: 0.0895 - categorical_accuracy: 0.1545\n",
      "Epoch 14/1000\n",
      " - 21s - loss: 0.0895 - categorical_accuracy: 0.1576\n",
      "Epoch 15/1000\n",
      " - 21s - loss: 0.0895 - categorical_accuracy: 0.1572\n",
      "Epoch 16/1000\n",
      " - 21s - loss: 0.0894 - categorical_accuracy: 0.1574\n",
      "Epoch 17/1000\n",
      " - 21s - loss: 0.0894 - categorical_accuracy: 0.1637\n",
      "Epoch 18/1000\n",
      " - 21s - loss: 0.0893 - categorical_accuracy: 0.1624\n",
      "Epoch 19/1000\n",
      " - 21s - loss: 0.0892 - categorical_accuracy: 0.1602\n",
      "Epoch 20/1000\n",
      " - 21s - loss: 0.0890 - categorical_accuracy: 0.1620\n",
      "Epoch 21/1000\n",
      " - 21s - loss: 0.0890 - categorical_accuracy: 0.1619\n",
      "Epoch 22/1000\n",
      " - 21s - loss: 0.0889 - categorical_accuracy: 0.1641\n",
      "Epoch 23/1000\n",
      " - 21s - loss: 0.0887 - categorical_accuracy: 0.1630\n",
      "Epoch 24/1000\n",
      " - 21s - loss: 0.0886 - categorical_accuracy: 0.1626\n",
      "Epoch 25/1000\n",
      " - 21s - loss: 0.0884 - categorical_accuracy: 0.1628\n",
      "Epoch 26/1000\n",
      " - 21s - loss: 0.0883 - categorical_accuracy: 0.1635\n",
      "Epoch 27/1000\n",
      " - 21s - loss: 0.0882 - categorical_accuracy: 0.1634\n",
      "Epoch 28/1000\n",
      " - 21s - loss: 0.0881 - categorical_accuracy: 0.1635\n",
      "Epoch 29/1000\n",
      " - 21s - loss: 0.0880 - categorical_accuracy: 0.1634\n",
      "Epoch 30/1000\n",
      " - 21s - loss: 0.0878 - categorical_accuracy: 0.1632\n",
      "Epoch 31/1000\n",
      " - 21s - loss: 0.0878 - categorical_accuracy: 0.1634\n",
      "Epoch 32/1000\n",
      " - 21s - loss: 0.0877 - categorical_accuracy: 0.1634\n",
      "Epoch 33/1000\n",
      " - 21s - loss: 0.0877 - categorical_accuracy: 0.1634\n",
      "Epoch 34/1000\n",
      " - 21s - loss: 0.0877 - categorical_accuracy: 0.1634\n",
      "Epoch 35/1000\n",
      " - 21s - loss: 0.0876 - categorical_accuracy: 0.1634\n",
      "Epoch 36/1000\n",
      " - 21s - loss: 0.0875 - categorical_accuracy: 0.1634\n",
      "Epoch 37/1000\n",
      " - 21s - loss: 0.0874 - categorical_accuracy: 0.1634\n",
      "Epoch 38/1000\n",
      " - 21s - loss: 0.0873 - categorical_accuracy: 0.1637\n",
      "Epoch 39/1000\n",
      " - 21s - loss: 0.0871 - categorical_accuracy: 0.1634\n",
      "Epoch 40/1000\n",
      " - 21s - loss: 0.0871 - categorical_accuracy: 0.1634\n",
      "Epoch 41/1000\n",
      " - 21s - loss: 0.0871 - categorical_accuracy: 0.1634\n",
      "Epoch 42/1000\n",
      " - 21s - loss: 0.0871 - categorical_accuracy: 0.1634\n",
      "Epoch 43/1000\n",
      " - 21s - loss: 0.0869 - categorical_accuracy: 0.1635\n",
      "Epoch 44/1000\n",
      " - 21s - loss: 0.0868 - categorical_accuracy: 0.1635\n",
      "Epoch 45/1000\n",
      " - 21s - loss: 0.0867 - categorical_accuracy: 0.1634\n",
      "Epoch 46/1000\n",
      " - 21s - loss: 0.0866 - categorical_accuracy: 0.1635\n",
      "Epoch 47/1000\n",
      " - 21s - loss: 0.0865 - categorical_accuracy: 0.1635\n",
      "Epoch 48/1000\n",
      " - 21s - loss: 0.0864 - categorical_accuracy: 0.1637\n",
      "Epoch 49/1000\n",
      " - 21s - loss: 0.0864 - categorical_accuracy: 0.1639\n",
      "Epoch 50/1000\n",
      " - 21s - loss: 0.0863 - categorical_accuracy: 0.1637\n",
      "Epoch 51/1000\n",
      " - 21s - loss: 0.0862 - categorical_accuracy: 0.1638\n",
      "Epoch 52/1000\n",
      " - 21s - loss: 0.0860 - categorical_accuracy: 0.1634\n",
      "Epoch 53/1000\n",
      " - 21s - loss: 0.0859 - categorical_accuracy: 0.1634\n",
      "Epoch 54/1000\n",
      " - 21s - loss: 0.0858 - categorical_accuracy: 0.1638\n",
      "Epoch 55/1000\n",
      " - 21s - loss: 0.0858 - categorical_accuracy: 0.1639\n",
      "Epoch 56/1000\n",
      " - 21s - loss: 0.0856 - categorical_accuracy: 0.1635\n",
      "Epoch 57/1000\n",
      " - 21s - loss: 0.0855 - categorical_accuracy: 0.1644\n",
      "Epoch 58/1000\n",
      " - 21s - loss: 0.0854 - categorical_accuracy: 0.1641\n",
      "Epoch 59/1000\n",
      " - 21s - loss: 0.0853 - categorical_accuracy: 0.1639\n",
      "Epoch 60/1000\n",
      " - 21s - loss: 0.0852 - categorical_accuracy: 0.1641\n",
      "Epoch 61/1000\n",
      " - 21s - loss: 0.0851 - categorical_accuracy: 0.1650\n",
      "Epoch 62/1000\n",
      " - 21s - loss: 0.0850 - categorical_accuracy: 0.1650\n",
      "Epoch 63/1000\n",
      " - 21s - loss: 0.0849 - categorical_accuracy: 0.1649\n",
      "Epoch 64/1000\n",
      " - 21s - loss: 0.0848 - categorical_accuracy: 0.1659\n",
      "Epoch 65/1000\n",
      " - 21s - loss: 0.0847 - categorical_accuracy: 0.1655\n",
      "Epoch 66/1000\n",
      " - 21s - loss: 0.0846 - categorical_accuracy: 0.1652\n",
      "Epoch 67/1000\n",
      " - 21s - loss: 0.0846 - categorical_accuracy: 0.1669\n",
      "Epoch 68/1000\n",
      " - 21s - loss: 0.0844 - categorical_accuracy: 0.1669\n",
      "Epoch 69/1000\n",
      " - 21s - loss: 0.0842 - categorical_accuracy: 0.1671\n",
      "Epoch 70/1000\n",
      " - 21s - loss: 0.0843 - categorical_accuracy: 0.1673\n",
      "Epoch 71/1000\n",
      " - 21s - loss: 0.0841 - categorical_accuracy: 0.1716\n",
      "Epoch 72/1000\n",
      " - 21s - loss: 0.0841 - categorical_accuracy: 0.1695\n",
      "Epoch 73/1000\n",
      " - 21s - loss: 0.0840 - categorical_accuracy: 0.1727\n",
      "Epoch 74/1000\n",
      " - 21s - loss: 0.0840 - categorical_accuracy: 0.1729\n",
      "Epoch 75/1000\n",
      " - 21s - loss: 0.0839 - categorical_accuracy: 0.1724\n",
      "Epoch 76/1000\n",
      " - 21s - loss: 0.0837 - categorical_accuracy: 0.1738\n",
      "Epoch 77/1000\n",
      " - 21s - loss: 0.0838 - categorical_accuracy: 0.1768\n",
      "Epoch 78/1000\n",
      " - 21s - loss: 0.0835 - categorical_accuracy: 0.1753\n",
      "Epoch 79/1000\n",
      " - 21s - loss: 0.0835 - categorical_accuracy: 0.1792\n",
      "Epoch 80/1000\n",
      " - 21s - loss: 0.0834 - categorical_accuracy: 0.1789\n",
      "Epoch 81/1000\n",
      " - 21s - loss: 0.0834 - categorical_accuracy: 0.1838\n",
      "Epoch 82/1000\n",
      " - 21s - loss: 0.0834 - categorical_accuracy: 0.1838\n",
      "Epoch 83/1000\n",
      " - 21s - loss: 0.0832 - categorical_accuracy: 0.1847\n",
      "Epoch 84/1000\n",
      " - 21s - loss: 0.0832 - categorical_accuracy: 0.1861\n",
      "Epoch 85/1000\n",
      " - 21s - loss: 0.0832 - categorical_accuracy: 0.1900\n",
      "Epoch 86/1000\n",
      " - 21s - loss: 0.0831 - categorical_accuracy: 0.1917\n",
      "Epoch 87/1000\n",
      " - 21s - loss: 0.0829 - categorical_accuracy: 0.1950\n",
      "Epoch 88/1000\n",
      " - 21s - loss: 0.0829 - categorical_accuracy: 0.1994\n",
      "Epoch 89/1000\n",
      " - 21s - loss: 0.0827 - categorical_accuracy: 0.2005\n",
      "Epoch 90/1000\n",
      " - 21s - loss: 0.0828 - categorical_accuracy: 0.2023\n",
      "Epoch 91/1000\n",
      " - 21s - loss: 0.0827 - categorical_accuracy: 0.2016\n",
      "Epoch 92/1000\n",
      " - 21s - loss: 0.0826 - categorical_accuracy: 0.2066\n",
      "Epoch 93/1000\n",
      " - 21s - loss: 0.0824 - categorical_accuracy: 0.2098\n",
      "Epoch 94/1000\n",
      " - 21s - loss: 0.0824 - categorical_accuracy: 0.2061\n",
      "Epoch 95/1000\n",
      " - 21s - loss: 0.0825 - categorical_accuracy: 0.2108\n",
      "Epoch 96/1000\n",
      " - 21s - loss: 0.0823 - categorical_accuracy: 0.2142\n",
      "Epoch 97/1000\n",
      " - 21s - loss: 0.0823 - categorical_accuracy: 0.2188\n",
      "Epoch 98/1000\n",
      " - 21s - loss: 0.0822 - categorical_accuracy: 0.2162\n",
      "Epoch 99/1000\n",
      " - 21s - loss: 0.0821 - categorical_accuracy: 0.2202\n",
      "Epoch 100/1000\n",
      " - 21s - loss: 0.0821 - categorical_accuracy: 0.2231\n",
      "Epoch 101/1000\n",
      " - 21s - loss: 0.0819 - categorical_accuracy: 0.2273\n",
      "Epoch 102/1000\n",
      " - 21s - loss: 0.0820 - categorical_accuracy: 0.2277\n",
      "Epoch 103/1000\n",
      " - 21s - loss: 0.0820 - categorical_accuracy: 0.2307\n",
      "Epoch 104/1000\n",
      " - 21s - loss: 0.0818 - categorical_accuracy: 0.2314\n",
      "Epoch 105/1000\n",
      " - 21s - loss: 0.0818 - categorical_accuracy: 0.2334\n",
      "Epoch 106/1000\n",
      " - 21s - loss: 0.0817 - categorical_accuracy: 0.2282\n",
      "Epoch 107/1000\n",
      " - 21s - loss: 0.0816 - categorical_accuracy: 0.2354\n",
      "Epoch 108/1000\n",
      " - 21s - loss: 0.0816 - categorical_accuracy: 0.2346\n",
      "Epoch 109/1000\n",
      " - 21s - loss: 0.0814 - categorical_accuracy: 0.2352\n",
      "Epoch 110/1000\n",
      " - 21s - loss: 0.0815 - categorical_accuracy: 0.2420\n",
      "Epoch 111/1000\n",
      " - 21s - loss: 0.0813 - categorical_accuracy: 0.2409\n",
      "Epoch 112/1000\n",
      " - 21s - loss: 0.0813 - categorical_accuracy: 0.2424\n",
      "Epoch 113/1000\n",
      " - 21s - loss: 0.0814 - categorical_accuracy: 0.2476\n",
      "Epoch 114/1000\n",
      " - 21s - loss: 0.0810 - categorical_accuracy: 0.2515\n",
      "Epoch 115/1000\n",
      " - 21s - loss: 0.0810 - categorical_accuracy: 0.2489\n",
      "Epoch 116/1000\n",
      " - 21s - loss: 0.0810 - categorical_accuracy: 0.2580\n",
      "Epoch 117/1000\n",
      " - 21s - loss: 0.0810 - categorical_accuracy: 0.2496\n",
      "Epoch 118/1000\n",
      " - 21s - loss: 0.0807 - categorical_accuracy: 0.2524\n",
      "Epoch 119/1000\n",
      " - 21s - loss: 0.0808 - categorical_accuracy: 0.2580\n",
      "Epoch 120/1000\n",
      " - 21s - loss: 0.0807 - categorical_accuracy: 0.2587\n",
      "Epoch 121/1000\n",
      " - 21s - loss: 0.0807 - categorical_accuracy: 0.2625\n",
      "Epoch 122/1000\n",
      " - 21s - loss: 0.0805 - categorical_accuracy: 0.2596\n",
      "Epoch 123/1000\n",
      " - 21s - loss: 0.0803 - categorical_accuracy: 0.2621\n",
      "Epoch 124/1000\n",
      " - 21s - loss: 0.0805 - categorical_accuracy: 0.2636\n",
      "Epoch 125/1000\n",
      " - 21s - loss: 0.0803 - categorical_accuracy: 0.2639\n",
      "Epoch 126/1000\n",
      " - 21s - loss: 0.0802 - categorical_accuracy: 0.2695\n",
      "Epoch 127/1000\n",
      " - 21s - loss: 0.0803 - categorical_accuracy: 0.2621\n",
      "Epoch 128/1000\n",
      " - 21s - loss: 0.0801 - categorical_accuracy: 0.2702\n",
      "Epoch 129/1000\n",
      " - 21s - loss: 0.0801 - categorical_accuracy: 0.2677\n",
      "Epoch 130/1000\n",
      " - 21s - loss: 0.0798 - categorical_accuracy: 0.2700\n",
      "Epoch 131/1000\n",
      " - 21s - loss: 0.0799 - categorical_accuracy: 0.2752\n",
      "Epoch 132/1000\n",
      " - 21s - loss: 0.0798 - categorical_accuracy: 0.2762\n",
      "Epoch 133/1000\n",
      " - 21s - loss: 0.0798 - categorical_accuracy: 0.2774\n",
      "Epoch 134/1000\n",
      " - 21s - loss: 0.0796 - categorical_accuracy: 0.2776\n",
      "Epoch 135/1000\n",
      " - 21s - loss: 0.0796 - categorical_accuracy: 0.2781\n",
      "Epoch 136/1000\n",
      " - 21s - loss: 0.0795 - categorical_accuracy: 0.2772\n",
      "Epoch 137/1000\n",
      " - 21s - loss: 0.0794 - categorical_accuracy: 0.2819\n",
      "Epoch 138/1000\n",
      " - 21s - loss: 0.0793 - categorical_accuracy: 0.2849\n",
      "Epoch 139/1000\n",
      " - 21s - loss: 0.0794 - categorical_accuracy: 0.2803\n",
      "Epoch 140/1000\n",
      " - 21s - loss: 0.0791 - categorical_accuracy: 0.2860\n",
      "Epoch 141/1000\n",
      " - 21s - loss: 0.0791 - categorical_accuracy: 0.2846\n",
      "Epoch 142/1000\n",
      " - 21s - loss: 0.0789 - categorical_accuracy: 0.2860\n",
      "Epoch 143/1000\n",
      " - 21s - loss: 0.0790 - categorical_accuracy: 0.2889\n",
      "Epoch 144/1000\n",
      " - 21s - loss: 0.0787 - categorical_accuracy: 0.2880\n",
      "Epoch 145/1000\n",
      " - 21s - loss: 0.0788 - categorical_accuracy: 0.2914\n",
      "Epoch 146/1000\n",
      " - 21s - loss: 0.0786 - categorical_accuracy: 0.2876\n",
      "Epoch 147/1000\n",
      " - 21s - loss: 0.0786 - categorical_accuracy: 0.2916\n",
      "Epoch 148/1000\n",
      " - 21s - loss: 0.0784 - categorical_accuracy: 0.2955\n",
      "Epoch 149/1000\n",
      " - 21s - loss: 0.0783 - categorical_accuracy: 0.2974\n",
      "Epoch 150/1000\n",
      " - 21s - loss: 0.0783 - categorical_accuracy: 0.2950\n",
      "Epoch 151/1000\n",
      " - 21s - loss: 0.0782 - categorical_accuracy: 0.2952\n",
      "Epoch 152/1000\n",
      " - 21s - loss: 0.0781 - categorical_accuracy: 0.2982\n",
      "Epoch 153/1000\n",
      " - 21s - loss: 0.0782 - categorical_accuracy: 0.2967\n",
      "Epoch 154/1000\n",
      " - 21s - loss: 0.0782 - categorical_accuracy: 0.2952\n",
      "Epoch 155/1000\n",
      " - 21s - loss: 0.0778 - categorical_accuracy: 0.2937\n",
      "Epoch 156/1000\n",
      " - 21s - loss: 0.0779 - categorical_accuracy: 0.2988\n",
      "Epoch 157/1000\n",
      " - 21s - loss: 0.0777 - categorical_accuracy: 0.2992\n",
      "Epoch 158/1000\n",
      " - 21s - loss: 0.0776 - categorical_accuracy: 0.3036\n",
      "Epoch 159/1000\n",
      " - 21s - loss: 0.0777 - categorical_accuracy: 0.3038\n",
      "Epoch 160/1000\n",
      " - 21s - loss: 0.0775 - categorical_accuracy: 0.3006\n",
      "Epoch 161/1000\n",
      " - 21s - loss: 0.0777 - categorical_accuracy: 0.3068\n",
      "Epoch 162/1000\n",
      " - 21s - loss: 0.0775 - categorical_accuracy: 0.3047\n",
      "Epoch 163/1000\n",
      " - 21s - loss: 0.0774 - categorical_accuracy: 0.3042\n",
      "Epoch 164/1000\n",
      " - 21s - loss: 0.0773 - categorical_accuracy: 0.3021\n",
      "Epoch 165/1000\n",
      " - 21s - loss: 0.0773 - categorical_accuracy: 0.3104\n",
      "Epoch 166/1000\n",
      " - 21s - loss: 0.0771 - categorical_accuracy: 0.3125\n",
      "Epoch 167/1000\n",
      " - 21s - loss: 0.0770 - categorical_accuracy: 0.3083\n",
      "Epoch 168/1000\n",
      " - 21s - loss: 0.0769 - categorical_accuracy: 0.3118\n",
      "Epoch 169/1000\n",
      " - 21s - loss: 0.0767 - categorical_accuracy: 0.3128\n",
      "Epoch 170/1000\n",
      " - 21s - loss: 0.0768 - categorical_accuracy: 0.3169\n",
      "Epoch 171/1000\n",
      " - 21s - loss: 0.0765 - categorical_accuracy: 0.3143\n",
      "Epoch 172/1000\n",
      " - 21s - loss: 0.0767 - categorical_accuracy: 0.3169\n",
      "Epoch 173/1000\n",
      " - 21s - loss: 0.0763 - categorical_accuracy: 0.3221\n",
      "Epoch 174/1000\n",
      " - 21s - loss: 0.0763 - categorical_accuracy: 0.3214\n",
      "Epoch 175/1000\n",
      " - 21s - loss: 0.0761 - categorical_accuracy: 0.3196\n",
      "Epoch 176/1000\n",
      " - 21s - loss: 0.0758 - categorical_accuracy: 0.3259\n",
      "Epoch 177/1000\n",
      " - 21s - loss: 0.0759 - categorical_accuracy: 0.3308\n",
      "Epoch 178/1000\n",
      " - 21s - loss: 0.0758 - categorical_accuracy: 0.3273\n",
      "Epoch 179/1000\n",
      " - 21s - loss: 0.0756 - categorical_accuracy: 0.3284\n",
      "Epoch 180/1000\n",
      " - 21s - loss: 0.0755 - categorical_accuracy: 0.3282\n",
      "Epoch 181/1000\n",
      " - 21s - loss: 0.0756 - categorical_accuracy: 0.3336\n",
      "Epoch 182/1000\n",
      " - 21s - loss: 0.0755 - categorical_accuracy: 0.3311\n",
      "Epoch 183/1000\n",
      " - 21s - loss: 0.0754 - categorical_accuracy: 0.3307\n",
      "Epoch 184/1000\n",
      " - 21s - loss: 0.0751 - categorical_accuracy: 0.3362\n",
      "Epoch 185/1000\n",
      " - 21s - loss: 0.0750 - categorical_accuracy: 0.3362\n",
      "Epoch 186/1000\n",
      " - 21s - loss: 0.0751 - categorical_accuracy: 0.3387\n",
      "Epoch 187/1000\n",
      " - 21s - loss: 0.0748 - categorical_accuracy: 0.3417\n",
      "Epoch 188/1000\n",
      " - 21s - loss: 0.0746 - categorical_accuracy: 0.3465\n",
      "Epoch 189/1000\n",
      " - 21s - loss: 0.0744 - categorical_accuracy: 0.3469\n",
      "Epoch 190/1000\n",
      " - 21s - loss: 0.0743 - categorical_accuracy: 0.3483\n",
      "Epoch 191/1000\n",
      " - 21s - loss: 0.0741 - categorical_accuracy: 0.3509\n",
      "Epoch 192/1000\n",
      " - 21s - loss: 0.0742 - categorical_accuracy: 0.3535\n",
      "Epoch 193/1000\n",
      " - 21s - loss: 0.0740 - categorical_accuracy: 0.3553\n",
      "Epoch 194/1000\n",
      " - 21s - loss: 0.0738 - categorical_accuracy: 0.3499\n",
      "Epoch 195/1000\n",
      " - 21s - loss: 0.0737 - categorical_accuracy: 0.3577\n",
      "Epoch 196/1000\n",
      " - 21s - loss: 0.0736 - categorical_accuracy: 0.3521\n",
      "Epoch 197/1000\n",
      " - 21s - loss: 0.0733 - categorical_accuracy: 0.3598\n",
      "Epoch 198/1000\n",
      " - 21s - loss: 0.0736 - categorical_accuracy: 0.3495\n",
      "Epoch 199/1000\n",
      " - 21s - loss: 0.0732 - categorical_accuracy: 0.3632\n",
      "Epoch 200/1000\n",
      " - 21s - loss: 0.0732 - categorical_accuracy: 0.3574\n",
      "Epoch 201/1000\n",
      " - 21s - loss: 0.0731 - categorical_accuracy: 0.3643\n",
      "Epoch 202/1000\n",
      " - 21s - loss: 0.0728 - categorical_accuracy: 0.3695\n",
      "Epoch 203/1000\n",
      " - 21s - loss: 0.0727 - categorical_accuracy: 0.3653\n",
      "Epoch 204/1000\n",
      " - 21s - loss: 0.0724 - categorical_accuracy: 0.3697\n",
      "Epoch 205/1000\n",
      " - 21s - loss: 0.0726 - categorical_accuracy: 0.3726\n",
      "Epoch 206/1000\n",
      " - 21s - loss: 0.0724 - categorical_accuracy: 0.3650\n",
      "Epoch 207/1000\n",
      " - 21s - loss: 0.0722 - categorical_accuracy: 0.3704\n",
      "Epoch 208/1000\n",
      " - 21s - loss: 0.0720 - categorical_accuracy: 0.3713\n",
      "Epoch 209/1000\n",
      " - 21s - loss: 0.0723 - categorical_accuracy: 0.3670\n",
      "Epoch 210/1000\n",
      " - 21s - loss: 0.0716 - categorical_accuracy: 0.3744\n",
      "Epoch 211/1000\n",
      " - 21s - loss: 0.0716 - categorical_accuracy: 0.3779\n",
      "Epoch 212/1000\n",
      " - 21s - loss: 0.0715 - categorical_accuracy: 0.3821\n",
      "Epoch 213/1000\n",
      " - 21s - loss: 0.0714 - categorical_accuracy: 0.3796\n",
      "Epoch 214/1000\n",
      " - 21s - loss: 0.0709 - categorical_accuracy: 0.3875\n",
      "Epoch 215/1000\n",
      " - 21s - loss: 0.0709 - categorical_accuracy: 0.3891\n",
      "Epoch 216/1000\n",
      " - 21s - loss: 0.0709 - categorical_accuracy: 0.3833\n",
      "Epoch 217/1000\n",
      " - 21s - loss: 0.0708 - categorical_accuracy: 0.3894\n",
      "Epoch 218/1000\n",
      " - 21s - loss: 0.0704 - categorical_accuracy: 0.3933\n",
      "Epoch 219/1000\n",
      " - 21s - loss: 0.0704 - categorical_accuracy: 0.3966\n",
      "Epoch 220/1000\n",
      " - 21s - loss: 0.0703 - categorical_accuracy: 0.4011\n",
      "Epoch 221/1000\n",
      " - 21s - loss: 0.0700 - categorical_accuracy: 0.3998\n",
      "Epoch 222/1000\n",
      " - 21s - loss: 0.0698 - categorical_accuracy: 0.4132\n",
      "Epoch 223/1000\n",
      " - 21s - loss: 0.0699 - categorical_accuracy: 0.3990\n",
      "Epoch 224/1000\n",
      " - 21s - loss: 0.0698 - categorical_accuracy: 0.4051\n",
      "Epoch 225/1000\n",
      " - 21s - loss: 0.0691 - categorical_accuracy: 0.4099\n",
      "Epoch 226/1000\n",
      " - 21s - loss: 0.0693 - categorical_accuracy: 0.4024\n",
      "Epoch 227/1000\n",
      " - 21s - loss: 0.0692 - categorical_accuracy: 0.4137\n",
      "Epoch 228/1000\n",
      " - 21s - loss: 0.0690 - categorical_accuracy: 0.4090\n",
      "Epoch 229/1000\n",
      " - 21s - loss: 0.0691 - categorical_accuracy: 0.4078\n",
      "Epoch 230/1000\n",
      " - 21s - loss: 0.0688 - categorical_accuracy: 0.4101\n",
      "Epoch 231/1000\n",
      " - 21s - loss: 0.0685 - categorical_accuracy: 0.4164\n",
      "Epoch 232/1000\n",
      " - 21s - loss: 0.0678 - categorical_accuracy: 0.4241\n",
      "Epoch 233/1000\n",
      " - 21s - loss: 0.0682 - categorical_accuracy: 0.4188\n",
      "Epoch 234/1000\n",
      " - 21s - loss: 0.0679 - categorical_accuracy: 0.4245\n",
      "Epoch 235/1000\n",
      " - 21s - loss: 0.0678 - categorical_accuracy: 0.4210\n",
      "Epoch 236/1000\n",
      " - 21s - loss: 0.0675 - categorical_accuracy: 0.4328\n",
      "Epoch 237/1000\n",
      " - 21s - loss: 0.0673 - categorical_accuracy: 0.4378\n",
      "Epoch 238/1000\n",
      " - 21s - loss: 0.0671 - categorical_accuracy: 0.4308\n",
      "Epoch 239/1000\n",
      " - 21s - loss: 0.0673 - categorical_accuracy: 0.4288\n",
      "Epoch 240/1000\n",
      " - 21s - loss: 0.0666 - categorical_accuracy: 0.4432\n",
      "Epoch 241/1000\n",
      " - 21s - loss: 0.0665 - categorical_accuracy: 0.4418\n",
      "Epoch 242/1000\n",
      " - 21s - loss: 0.0663 - categorical_accuracy: 0.4446\n",
      "Epoch 243/1000\n",
      " - 21s - loss: 0.0663 - categorical_accuracy: 0.4412\n",
      "Epoch 244/1000\n",
      " - 21s - loss: 0.0660 - categorical_accuracy: 0.4458\n",
      "Epoch 245/1000\n",
      " - 21s - loss: 0.0658 - categorical_accuracy: 0.4563\n",
      "Epoch 246/1000\n",
      " - 21s - loss: 0.0655 - categorical_accuracy: 0.4580\n",
      "Epoch 247/1000\n",
      " - 21s - loss: 0.0654 - categorical_accuracy: 0.4604\n",
      "Epoch 248/1000\n",
      " - 21s - loss: 0.0651 - categorical_accuracy: 0.4660\n",
      "Epoch 249/1000\n",
      " - 21s - loss: 0.0651 - categorical_accuracy: 0.4597\n",
      "Epoch 250/1000\n",
      " - 21s - loss: 0.0646 - categorical_accuracy: 0.4677\n",
      "Epoch 251/1000\n",
      " - 21s - loss: 0.0647 - categorical_accuracy: 0.4701\n",
      "Epoch 252/1000\n",
      " - 21s - loss: 0.0642 - categorical_accuracy: 0.4698\n",
      "Epoch 253/1000\n",
      " - 21s - loss: 0.0638 - categorical_accuracy: 0.4831\n",
      "Epoch 254/1000\n",
      " - 21s - loss: 0.0633 - categorical_accuracy: 0.4899\n",
      "Epoch 255/1000\n",
      " - 21s - loss: 0.0630 - categorical_accuracy: 0.4875\n",
      "Epoch 256/1000\n",
      " - 21s - loss: 0.0631 - categorical_accuracy: 0.4870\n",
      "Epoch 257/1000\n",
      " - 21s - loss: 0.0623 - categorical_accuracy: 0.4949\n",
      "Epoch 258/1000\n",
      " - 21s - loss: 0.0623 - categorical_accuracy: 0.5011\n",
      "Epoch 259/1000\n",
      " - 21s - loss: 0.0618 - categorical_accuracy: 0.5083\n",
      "Epoch 260/1000\n",
      " - 21s - loss: 0.0613 - categorical_accuracy: 0.5080\n",
      "Epoch 261/1000\n",
      " - 21s - loss: 0.0612 - categorical_accuracy: 0.5055\n",
      "Epoch 262/1000\n",
      " - 21s - loss: 0.0605 - categorical_accuracy: 0.5216\n",
      "Epoch 263/1000\n",
      " - 21s - loss: 0.0604 - categorical_accuracy: 0.5188\n",
      "Epoch 264/1000\n",
      " - 21s - loss: 0.0600 - categorical_accuracy: 0.5274\n",
      "Epoch 265/1000\n",
      " - 21s - loss: 0.0593 - categorical_accuracy: 0.5387\n",
      "Epoch 266/1000\n",
      " - 21s - loss: 0.0589 - categorical_accuracy: 0.5396\n",
      "Epoch 267/1000\n",
      " - 21s - loss: 0.0584 - categorical_accuracy: 0.5434\n",
      "Epoch 268/1000\n",
      " - 21s - loss: 0.0574 - categorical_accuracy: 0.5536\n",
      "Epoch 269/1000\n",
      " - 21s - loss: 0.0573 - categorical_accuracy: 0.5547\n",
      "Epoch 270/1000\n",
      " - 21s - loss: 0.0564 - categorical_accuracy: 0.5655\n",
      "Epoch 271/1000\n",
      " - 21s - loss: 0.0561 - categorical_accuracy: 0.5693\n",
      "Epoch 272/1000\n",
      " - 21s - loss: 0.0561 - categorical_accuracy: 0.5680\n",
      "Epoch 273/1000\n",
      " - 21s - loss: 0.0555 - categorical_accuracy: 0.5694\n",
      "Epoch 274/1000\n",
      " - 21s - loss: 0.0551 - categorical_accuracy: 0.5787\n",
      "Epoch 275/1000\n",
      " - 21s - loss: 0.0544 - categorical_accuracy: 0.5862\n",
      "Epoch 276/1000\n",
      " - 21s - loss: 0.0536 - categorical_accuracy: 0.5909\n",
      "Epoch 277/1000\n",
      " - 21s - loss: 0.0528 - categorical_accuracy: 0.5987\n",
      "Epoch 278/1000\n",
      " - 21s - loss: 0.0533 - categorical_accuracy: 0.5978\n",
      "Epoch 279/1000\n",
      " - 21s - loss: 0.0527 - categorical_accuracy: 0.5956\n",
      "Epoch 280/1000\n",
      " - 21s - loss: 0.0521 - categorical_accuracy: 0.6021\n",
      "Epoch 281/1000\n",
      " - 21s - loss: 0.0517 - categorical_accuracy: 0.6111\n",
      "Epoch 282/1000\n",
      " - 21s - loss: 0.0507 - categorical_accuracy: 0.6188\n",
      "Epoch 283/1000\n",
      " - 21s - loss: 0.0502 - categorical_accuracy: 0.6279\n",
      "Epoch 284/1000\n",
      " - 21s - loss: 0.0500 - categorical_accuracy: 0.6319\n",
      "Epoch 285/1000\n",
      " - 21s - loss: 0.0494 - categorical_accuracy: 0.6305\n",
      "Epoch 286/1000\n",
      " - 21s - loss: 0.0488 - categorical_accuracy: 0.6332\n",
      "Epoch 287/1000\n",
      " - 21s - loss: 0.0485 - categorical_accuracy: 0.6366\n",
      "Epoch 288/1000\n",
      " - 21s - loss: 0.0479 - categorical_accuracy: 0.6416\n",
      "Epoch 289/1000\n",
      " - 21s - loss: 0.0477 - categorical_accuracy: 0.6502\n",
      "Epoch 290/1000\n",
      " - 21s - loss: 0.0476 - categorical_accuracy: 0.6447\n",
      "Epoch 291/1000\n",
      " - 21s - loss: 0.0470 - categorical_accuracy: 0.6506\n",
      "Epoch 292/1000\n",
      " - 21s - loss: 0.0468 - categorical_accuracy: 0.6605\n",
      "Epoch 293/1000\n",
      " - 21s - loss: 0.0466 - categorical_accuracy: 0.6504\n",
      "Epoch 294/1000\n",
      " - 21s - loss: 0.0460 - categorical_accuracy: 0.6587\n",
      "Epoch 295/1000\n",
      " - 21s - loss: 0.0459 - categorical_accuracy: 0.6646\n",
      "Epoch 296/1000\n",
      " - 21s - loss: 0.0460 - categorical_accuracy: 0.6603\n",
      "Epoch 297/1000\n",
      " - 21s - loss: 0.0452 - categorical_accuracy: 0.6693\n",
      "Epoch 298/1000\n",
      " - 21s - loss: 0.0448 - categorical_accuracy: 0.6716\n",
      "Epoch 299/1000\n",
      " - 21s - loss: 0.0449 - categorical_accuracy: 0.6748\n",
      "Epoch 300/1000\n",
      " - 21s - loss: 0.0445 - categorical_accuracy: 0.6753\n",
      "Epoch 301/1000\n",
      " - 21s - loss: 0.0438 - categorical_accuracy: 0.6825\n",
      "Epoch 302/1000\n",
      " - 21s - loss: 0.0433 - categorical_accuracy: 0.6885\n",
      "Epoch 303/1000\n",
      " - 21s - loss: 0.0432 - categorical_accuracy: 0.6882\n",
      "Epoch 304/1000\n",
      " - 21s - loss: 0.0420 - categorical_accuracy: 0.6980\n",
      "Epoch 305/1000\n",
      " - 21s - loss: 0.0420 - categorical_accuracy: 0.6972\n",
      "Epoch 306/1000\n",
      " - 21s - loss: 0.0420 - categorical_accuracy: 0.7030\n",
      "Epoch 307/1000\n",
      " - 21s - loss: 0.0419 - categorical_accuracy: 0.6980\n",
      "Epoch 308/1000\n",
      " - 21s - loss: 0.0416 - categorical_accuracy: 0.7019\n",
      "Epoch 309/1000\n",
      " - 21s - loss: 0.0406 - categorical_accuracy: 0.7068\n",
      "Epoch 310/1000\n",
      " - 21s - loss: 0.0403 - categorical_accuracy: 0.7120\n",
      "Epoch 311/1000\n",
      " - 21s - loss: 0.0399 - categorical_accuracy: 0.7137\n",
      "Epoch 312/1000\n",
      " - 21s - loss: 0.0398 - categorical_accuracy: 0.7147\n",
      "Epoch 313/1000\n",
      " - 21s - loss: 0.0390 - categorical_accuracy: 0.7245\n",
      "Epoch 314/1000\n",
      " - 21s - loss: 0.0387 - categorical_accuracy: 0.7219\n",
      "Epoch 315/1000\n",
      " - 21s - loss: 0.0391 - categorical_accuracy: 0.7165\n",
      "Epoch 316/1000\n",
      " - 21s - loss: 0.0386 - categorical_accuracy: 0.7231\n",
      "Epoch 317/1000\n",
      " - 21s - loss: 0.0380 - categorical_accuracy: 0.7262\n",
      "Epoch 318/1000\n",
      " - 21s - loss: 0.0379 - categorical_accuracy: 0.7285\n",
      "Epoch 319/1000\n",
      " - 21s - loss: 0.0379 - categorical_accuracy: 0.7331\n",
      "Epoch 320/1000\n",
      " - 21s - loss: 0.0368 - categorical_accuracy: 0.7409\n",
      "Epoch 321/1000\n",
      " - 21s - loss: 0.0372 - categorical_accuracy: 0.7421\n",
      "Epoch 322/1000\n",
      " - 21s - loss: 0.0370 - categorical_accuracy: 0.7389\n",
      "Epoch 323/1000\n",
      " - 21s - loss: 0.0361 - categorical_accuracy: 0.7446\n",
      "Epoch 324/1000\n",
      " - 21s - loss: 0.0359 - categorical_accuracy: 0.7481\n",
      "Epoch 325/1000\n",
      " - 21s - loss: 0.0360 - categorical_accuracy: 0.7433\n",
      "Epoch 326/1000\n",
      " - 21s - loss: 0.0354 - categorical_accuracy: 0.7503\n",
      "Epoch 327/1000\n",
      " - 21s - loss: 0.0361 - categorical_accuracy: 0.7422\n",
      "Epoch 328/1000\n",
      " - 21s - loss: 0.0349 - categorical_accuracy: 0.7500\n",
      "Epoch 329/1000\n",
      " - 21s - loss: 0.0349 - categorical_accuracy: 0.7537\n",
      "Epoch 330/1000\n",
      " - 21s - loss: 0.0346 - categorical_accuracy: 0.7589\n",
      "Epoch 331/1000\n",
      " - 21s - loss: 0.0347 - categorical_accuracy: 0.7512\n",
      "Epoch 332/1000\n",
      " - 21s - loss: 0.0346 - categorical_accuracy: 0.7586\n",
      "Epoch 333/1000\n",
      " - 21s - loss: 0.0343 - categorical_accuracy: 0.7561\n",
      "Epoch 334/1000\n",
      " - 21s - loss: 0.0342 - categorical_accuracy: 0.7590\n",
      "Epoch 335/1000\n",
      " - 21s - loss: 0.0338 - categorical_accuracy: 0.7627\n",
      "Epoch 336/1000\n",
      " - 21s - loss: 0.0334 - categorical_accuracy: 0.7673\n",
      "Epoch 337/1000\n",
      " - 21s - loss: 0.0337 - categorical_accuracy: 0.7623\n",
      "Epoch 338/1000\n",
      " - 21s - loss: 0.0339 - categorical_accuracy: 0.7639\n",
      "Epoch 339/1000\n",
      " - 21s - loss: 0.0330 - categorical_accuracy: 0.7680\n",
      "Epoch 340/1000\n",
      " - 21s - loss: 0.0328 - categorical_accuracy: 0.7686\n",
      "Epoch 341/1000\n",
      " - 21s - loss: 0.0327 - categorical_accuracy: 0.7738\n",
      "Epoch 342/1000\n",
      " - 21s - loss: 0.0328 - categorical_accuracy: 0.7697\n",
      "Epoch 343/1000\n",
      " - 21s - loss: 0.0330 - categorical_accuracy: 0.7669\n",
      "Epoch 344/1000\n",
      " - 21s - loss: 0.0320 - categorical_accuracy: 0.7749\n",
      "Epoch 345/1000\n",
      " - 21s - loss: 0.0319 - categorical_accuracy: 0.7772\n",
      "Epoch 346/1000\n",
      " - 21s - loss: 0.0321 - categorical_accuracy: 0.7745\n",
      "Epoch 347/1000\n",
      " - 21s - loss: 0.0318 - categorical_accuracy: 0.7749\n",
      "Epoch 348/1000\n",
      " - 21s - loss: 0.0321 - categorical_accuracy: 0.7763\n",
      "Epoch 349/1000\n",
      " - 21s - loss: 0.0314 - categorical_accuracy: 0.7784\n",
      "Epoch 350/1000\n",
      " - 21s - loss: 0.0313 - categorical_accuracy: 0.7806\n",
      "Epoch 351/1000\n",
      " - 21s - loss: 0.0313 - categorical_accuracy: 0.7812\n",
      "Epoch 352/1000\n",
      " - 21s - loss: 0.0315 - categorical_accuracy: 0.7790\n",
      "Epoch 353/1000\n",
      " - 21s - loss: 0.0314 - categorical_accuracy: 0.7805\n",
      "Epoch 354/1000\n",
      " - 21s - loss: 0.0312 - categorical_accuracy: 0.7819\n",
      "Epoch 355/1000\n",
      " - 21s - loss: 0.0310 - categorical_accuracy: 0.7880\n",
      "Epoch 356/1000\n",
      " - 21s - loss: 0.0309 - categorical_accuracy: 0.7815\n",
      "Epoch 357/1000\n",
      " - 21s - loss: 0.0310 - categorical_accuracy: 0.7823\n",
      "Epoch 358/1000\n",
      " - 21s - loss: 0.0306 - categorical_accuracy: 0.7870\n",
      "Epoch 359/1000\n",
      " - 21s - loss: 0.0313 - categorical_accuracy: 0.7823\n",
      "Epoch 360/1000\n",
      " - 21s - loss: 0.0302 - categorical_accuracy: 0.7878\n",
      "Epoch 361/1000\n",
      " - 21s - loss: 0.0301 - categorical_accuracy: 0.7900\n",
      "Epoch 362/1000\n",
      " - 21s - loss: 0.0302 - categorical_accuracy: 0.7871\n",
      "Epoch 363/1000\n",
      " - 21s - loss: 0.0303 - categorical_accuracy: 0.7862\n",
      "Epoch 364/1000\n",
      " - 21s - loss: 0.0300 - categorical_accuracy: 0.7894\n",
      "Epoch 365/1000\n",
      " - 21s - loss: 0.0302 - categorical_accuracy: 0.7863\n",
      "Epoch 366/1000\n",
      " - 21s - loss: 0.0297 - categorical_accuracy: 0.7953\n",
      "Epoch 367/1000\n",
      " - 21s - loss: 0.0297 - categorical_accuracy: 0.7912\n",
      "Epoch 368/1000\n",
      " - 21s - loss: 0.0299 - categorical_accuracy: 0.7909\n",
      "Epoch 369/1000\n",
      " - 21s - loss: 0.0295 - categorical_accuracy: 0.7946\n",
      "Epoch 370/1000\n",
      " - 21s - loss: 0.0293 - categorical_accuracy: 0.7925\n",
      "Epoch 371/1000\n",
      " - 21s - loss: 0.0290 - categorical_accuracy: 0.7978\n",
      "Epoch 372/1000\n",
      " - 21s - loss: 0.0296 - categorical_accuracy: 0.7939\n",
      "Epoch 373/1000\n",
      " - 21s - loss: 0.0291 - categorical_accuracy: 0.7959\n",
      "Epoch 374/1000\n",
      " - 21s - loss: 0.0293 - categorical_accuracy: 0.7941\n",
      "Epoch 375/1000\n",
      " - 21s - loss: 0.0289 - categorical_accuracy: 0.7985\n",
      "Epoch 376/1000\n",
      " - 21s - loss: 0.0288 - categorical_accuracy: 0.7973\n",
      "Epoch 377/1000\n",
      " - 21s - loss: 0.0287 - categorical_accuracy: 0.7986\n",
      "Epoch 378/1000\n",
      " - 21s - loss: 0.0287 - categorical_accuracy: 0.8024\n",
      "Epoch 379/1000\n",
      " - 21s - loss: 0.0286 - categorical_accuracy: 0.7996\n",
      "Epoch 380/1000\n",
      " - 21s - loss: 0.0286 - categorical_accuracy: 0.8020\n",
      "Epoch 381/1000\n",
      " - 21s - loss: 0.0284 - categorical_accuracy: 0.8035\n",
      "Epoch 382/1000\n",
      " - 21s - loss: 0.0283 - categorical_accuracy: 0.8014\n",
      "Epoch 383/1000\n",
      " - 21s - loss: 0.0286 - categorical_accuracy: 0.7981\n",
      "Epoch 384/1000\n",
      " - 21s - loss: 0.0281 - categorical_accuracy: 0.8039\n",
      "Epoch 385/1000\n",
      " - 21s - loss: 0.0283 - categorical_accuracy: 0.8035\n",
      "Epoch 386/1000\n",
      " - 21s - loss: 0.0283 - categorical_accuracy: 0.8021\n",
      "Epoch 387/1000\n",
      " - 21s - loss: 0.0279 - categorical_accuracy: 0.8034\n",
      "Epoch 388/1000\n",
      " - 21s - loss: 0.0277 - categorical_accuracy: 0.8049\n",
      "Epoch 389/1000\n",
      " - 21s - loss: 0.0277 - categorical_accuracy: 0.8095\n",
      "Epoch 390/1000\n",
      " - 21s - loss: 0.0278 - categorical_accuracy: 0.8082\n",
      "Epoch 391/1000\n",
      " - 21s - loss: 0.0279 - categorical_accuracy: 0.8045\n",
      "Epoch 392/1000\n",
      " - 21s - loss: 0.0268 - categorical_accuracy: 0.8162\n",
      "Epoch 393/1000\n",
      " - 21s - loss: 0.0272 - categorical_accuracy: 0.8115\n",
      "Epoch 394/1000\n",
      " - 21s - loss: 0.0270 - categorical_accuracy: 0.8119\n",
      "Epoch 395/1000\n",
      " - 21s - loss: 0.0269 - categorical_accuracy: 0.8129\n",
      "Epoch 396/1000\n",
      " - 21s - loss: 0.0272 - categorical_accuracy: 0.8114\n",
      "Epoch 397/1000\n",
      " - 21s - loss: 0.0271 - categorical_accuracy: 0.8122\n",
      "Epoch 398/1000\n",
      " - 21s - loss: 0.0270 - categorical_accuracy: 0.8126\n",
      "Epoch 399/1000\n",
      " - 21s - loss: 0.0265 - categorical_accuracy: 0.8118\n",
      "Epoch 400/1000\n",
      " - 21s - loss: 0.0269 - categorical_accuracy: 0.8143\n",
      "Epoch 401/1000\n",
      " - 21s - loss: 0.0264 - categorical_accuracy: 0.8168\n",
      "Epoch 402/1000\n",
      " - 21s - loss: 0.0267 - categorical_accuracy: 0.8128\n",
      "Epoch 403/1000\n",
      " - 21s - loss: 0.0266 - categorical_accuracy: 0.8135\n",
      "Epoch 404/1000\n",
      " - 21s - loss: 0.0266 - categorical_accuracy: 0.8176\n",
      "Epoch 405/1000\n",
      " - 21s - loss: 0.0266 - categorical_accuracy: 0.8147\n",
      "Epoch 406/1000\n",
      " - 21s - loss: 0.0268 - categorical_accuracy: 0.8142\n",
      "Epoch 407/1000\n",
      " - 21s - loss: 0.0269 - categorical_accuracy: 0.8111\n",
      "Epoch 408/1000\n",
      " - 21s - loss: 0.0261 - categorical_accuracy: 0.8198\n",
      "Epoch 409/1000\n",
      " - 21s - loss: 0.0264 - categorical_accuracy: 0.8155\n",
      "Epoch 410/1000\n",
      " - 21s - loss: 0.0260 - categorical_accuracy: 0.8234\n",
      "Epoch 411/1000\n",
      " - 21s - loss: 0.0258 - categorical_accuracy: 0.8214\n",
      "Epoch 412/1000\n",
      " - 21s - loss: 0.0264 - categorical_accuracy: 0.8160\n",
      "Epoch 413/1000\n",
      " - 21s - loss: 0.0262 - categorical_accuracy: 0.8185\n",
      "Epoch 414/1000\n",
      " - 21s - loss: 0.0259 - categorical_accuracy: 0.8189\n",
      "Epoch 415/1000\n",
      " - 21s - loss: 0.0257 - categorical_accuracy: 0.8212\n",
      "Epoch 416/1000\n",
      " - 21s - loss: 0.0255 - categorical_accuracy: 0.8272\n",
      "Epoch 417/1000\n",
      " - 21s - loss: 0.0257 - categorical_accuracy: 0.8223\n",
      "Epoch 418/1000\n",
      " - 21s - loss: 0.0253 - categorical_accuracy: 0.8248\n",
      "Epoch 419/1000\n",
      " - 21s - loss: 0.0257 - categorical_accuracy: 0.8228\n",
      "Epoch 420/1000\n",
      " - 21s - loss: 0.0256 - categorical_accuracy: 0.8232\n",
      "Epoch 421/1000\n",
      " - 21s - loss: 0.0252 - categorical_accuracy: 0.8222\n",
      "Epoch 422/1000\n",
      " - 21s - loss: 0.0252 - categorical_accuracy: 0.8247\n",
      "Epoch 423/1000\n",
      " - 21s - loss: 0.0252 - categorical_accuracy: 0.8272\n",
      "Epoch 424/1000\n",
      " - 21s - loss: 0.0247 - categorical_accuracy: 0.8336\n",
      "Epoch 425/1000\n",
      " - 21s - loss: 0.0251 - categorical_accuracy: 0.8279\n",
      "Epoch 426/1000\n",
      " - 21s - loss: 0.0253 - categorical_accuracy: 0.8271\n",
      "Epoch 427/1000\n",
      " - 21s - loss: 0.0252 - categorical_accuracy: 0.8255\n",
      "Epoch 428/1000\n",
      " - 21s - loss: 0.0245 - categorical_accuracy: 0.8320\n",
      "Epoch 429/1000\n",
      " - 21s - loss: 0.0251 - categorical_accuracy: 0.8234\n",
      "Epoch 430/1000\n",
      " - 21s - loss: 0.0245 - categorical_accuracy: 0.8302\n",
      "Epoch 431/1000\n",
      " - 21s - loss: 0.0239 - categorical_accuracy: 0.8362\n",
      "Epoch 432/1000\n",
      " - 21s - loss: 0.0247 - categorical_accuracy: 0.8284\n",
      "Epoch 433/1000\n",
      " - 21s - loss: 0.0245 - categorical_accuracy: 0.8319\n",
      "Epoch 434/1000\n",
      " - 21s - loss: 0.0244 - categorical_accuracy: 0.8304\n",
      "Epoch 435/1000\n",
      " - 21s - loss: 0.0244 - categorical_accuracy: 0.8304\n",
      "Epoch 436/1000\n",
      " - 21s - loss: 0.0246 - categorical_accuracy: 0.8280\n",
      "Epoch 437/1000\n",
      " - 21s - loss: 0.0244 - categorical_accuracy: 0.8343\n",
      "Epoch 438/1000\n",
      " - 21s - loss: 0.0242 - categorical_accuracy: 0.8308\n",
      "Epoch 439/1000\n",
      " - 21s - loss: 0.0242 - categorical_accuracy: 0.8325\n",
      "Epoch 440/1000\n",
      " - 21s - loss: 0.0240 - categorical_accuracy: 0.8320\n",
      "Epoch 441/1000\n",
      " - 21s - loss: 0.0245 - categorical_accuracy: 0.8293\n",
      "Epoch 442/1000\n",
      " - 21s - loss: 0.0243 - categorical_accuracy: 0.8331\n",
      "Epoch 443/1000\n",
      " - 21s - loss: 0.0241 - categorical_accuracy: 0.8355\n",
      "Epoch 444/1000\n",
      " - 21s - loss: 0.0240 - categorical_accuracy: 0.8356\n",
      "Epoch 445/1000\n",
      " - 21s - loss: 0.0236 - categorical_accuracy: 0.8372\n",
      "Epoch 446/1000\n",
      " - 21s - loss: 0.0239 - categorical_accuracy: 0.8347\n",
      "Epoch 447/1000\n",
      " - 21s - loss: 0.0235 - categorical_accuracy: 0.8381\n",
      "Epoch 448/1000\n",
      " - 21s - loss: 0.0235 - categorical_accuracy: 0.8341\n",
      "Epoch 449/1000\n",
      " - 21s - loss: 0.0234 - categorical_accuracy: 0.8390\n",
      "Epoch 450/1000\n",
      " - 21s - loss: 0.0241 - categorical_accuracy: 0.8323\n",
      "Epoch 451/1000\n",
      " - 21s - loss: 0.0233 - categorical_accuracy: 0.8388\n",
      "Epoch 452/1000\n",
      " - 21s - loss: 0.0238 - categorical_accuracy: 0.8368\n",
      "Epoch 453/1000\n",
      " - 21s - loss: 0.0232 - categorical_accuracy: 0.8427\n",
      "Epoch 454/1000\n",
      " - 21s - loss: 0.0232 - categorical_accuracy: 0.8437\n",
      "Epoch 455/1000\n",
      " - 21s - loss: 0.0234 - categorical_accuracy: 0.8401\n",
      "Epoch 456/1000\n",
      " - 21s - loss: 0.0231 - categorical_accuracy: 0.8398\n",
      "Epoch 457/1000\n",
      " - 21s - loss: 0.0232 - categorical_accuracy: 0.8386\n",
      "Epoch 458/1000\n",
      " - 21s - loss: 0.0234 - categorical_accuracy: 0.8383\n",
      "Epoch 459/1000\n",
      " - 21s - loss: 0.0227 - categorical_accuracy: 0.8455\n",
      "Epoch 460/1000\n",
      " - 21s - loss: 0.0227 - categorical_accuracy: 0.8474\n",
      "Epoch 461/1000\n",
      " - 21s - loss: 0.0226 - categorical_accuracy: 0.8449\n",
      "Epoch 462/1000\n",
      " - 21s - loss: 0.0232 - categorical_accuracy: 0.8394\n",
      "Epoch 463/1000\n",
      " - 21s - loss: 0.0225 - categorical_accuracy: 0.8452\n",
      "Epoch 464/1000\n",
      " - 21s - loss: 0.0226 - categorical_accuracy: 0.8459\n",
      "Epoch 465/1000\n",
      " - 21s - loss: 0.0226 - categorical_accuracy: 0.8422\n",
      "Epoch 466/1000\n",
      " - 21s - loss: 0.0227 - categorical_accuracy: 0.8448\n",
      "Epoch 467/1000\n",
      " - 21s - loss: 0.0226 - categorical_accuracy: 0.8438\n",
      "Epoch 468/1000\n",
      " - 21s - loss: 0.0228 - categorical_accuracy: 0.8430\n",
      "Epoch 469/1000\n",
      " - 21s - loss: 0.0223 - categorical_accuracy: 0.8470\n",
      "Epoch 470/1000\n",
      " - 21s - loss: 0.0220 - categorical_accuracy: 0.8477\n",
      "Epoch 471/1000\n",
      " - 21s - loss: 0.0219 - categorical_accuracy: 0.8512\n",
      "Epoch 472/1000\n",
      " - 21s - loss: 0.0224 - categorical_accuracy: 0.8483\n",
      "Epoch 473/1000\n",
      " - 21s - loss: 0.0216 - categorical_accuracy: 0.8534\n",
      "Epoch 474/1000\n",
      " - 21s - loss: 0.0220 - categorical_accuracy: 0.8495\n",
      "Epoch 475/1000\n",
      " - 21s - loss: 0.0217 - categorical_accuracy: 0.8528\n",
      "Epoch 476/1000\n",
      " - 21s - loss: 0.0220 - categorical_accuracy: 0.8503\n",
      "Epoch 477/1000\n",
      " - 21s - loss: 0.0224 - categorical_accuracy: 0.8444\n",
      "Epoch 478/1000\n",
      " - 21s - loss: 0.0221 - categorical_accuracy: 0.8485\n",
      "Epoch 479/1000\n",
      " - 21s - loss: 0.0215 - categorical_accuracy: 0.8531\n",
      "Epoch 480/1000\n",
      " - 21s - loss: 0.0215 - categorical_accuracy: 0.8532\n",
      "Epoch 481/1000\n",
      " - 21s - loss: 0.0216 - categorical_accuracy: 0.8501\n",
      "Epoch 482/1000\n",
      " - 21s - loss: 0.0214 - categorical_accuracy: 0.8514\n",
      "Epoch 483/1000\n",
      " - 21s - loss: 0.0211 - categorical_accuracy: 0.8557\n",
      "Epoch 484/1000\n",
      " - 21s - loss: 0.0216 - categorical_accuracy: 0.8535\n",
      "Epoch 485/1000\n",
      " - 21s - loss: 0.0216 - categorical_accuracy: 0.8523\n",
      "Epoch 486/1000\n",
      " - 21s - loss: 0.0213 - categorical_accuracy: 0.8531\n",
      "Epoch 487/1000\n",
      " - 21s - loss: 0.0210 - categorical_accuracy: 0.8555\n",
      "Epoch 488/1000\n",
      " - 21s - loss: 0.0213 - categorical_accuracy: 0.8523\n",
      "Epoch 489/1000\n",
      " - 21s - loss: 0.0213 - categorical_accuracy: 0.8564\n",
      "Epoch 490/1000\n",
      " - 21s - loss: 0.0206 - categorical_accuracy: 0.8602\n",
      "Epoch 491/1000\n",
      " - 21s - loss: 0.0213 - categorical_accuracy: 0.8546\n",
      "Epoch 492/1000\n",
      " - 21s - loss: 0.0207 - categorical_accuracy: 0.8588\n",
      "Epoch 493/1000\n",
      " - 21s - loss: 0.0207 - categorical_accuracy: 0.8589\n",
      "Epoch 494/1000\n",
      " - 21s - loss: 0.0208 - categorical_accuracy: 0.8556\n",
      "Epoch 495/1000\n",
      " - 21s - loss: 0.0208 - categorical_accuracy: 0.8573\n",
      "Epoch 496/1000\n",
      " - 21s - loss: 0.0209 - categorical_accuracy: 0.8564\n",
      "Epoch 497/1000\n",
      " - 21s - loss: 0.0202 - categorical_accuracy: 0.8617\n",
      "Epoch 498/1000\n",
      " - 21s - loss: 0.0204 - categorical_accuracy: 0.8585\n",
      "Epoch 499/1000\n",
      " - 21s - loss: 0.0204 - categorical_accuracy: 0.8581\n",
      "Epoch 500/1000\n",
      " - 21s - loss: 0.0204 - categorical_accuracy: 0.8616\n",
      "Epoch 501/1000\n",
      " - 21s - loss: 0.0203 - categorical_accuracy: 0.8634\n",
      "Epoch 502/1000\n",
      " - 21s - loss: 0.0204 - categorical_accuracy: 0.8614\n",
      "Epoch 503/1000\n",
      " - 21s - loss: 0.0204 - categorical_accuracy: 0.8613\n",
      "Epoch 504/1000\n",
      " - 21s - loss: 0.0202 - categorical_accuracy: 0.8641\n",
      "Epoch 505/1000\n",
      " - 21s - loss: 0.0208 - categorical_accuracy: 0.8559\n",
      "Epoch 506/1000\n",
      " - 21s - loss: 0.0202 - categorical_accuracy: 0.8607\n",
      "Epoch 507/1000\n",
      " - 21s - loss: 0.0198 - categorical_accuracy: 0.8657\n",
      "Epoch 508/1000\n",
      " - 21s - loss: 0.0198 - categorical_accuracy: 0.8647\n",
      "Epoch 509/1000\n",
      " - 21s - loss: 0.0206 - categorical_accuracy: 0.8592\n",
      "Epoch 510/1000\n",
      " - 21s - loss: 0.0200 - categorical_accuracy: 0.8638\n",
      "Epoch 511/1000\n",
      " - 21s - loss: 0.0197 - categorical_accuracy: 0.8649\n",
      "Epoch 512/1000\n",
      " - 21s - loss: 0.0202 - categorical_accuracy: 0.8632\n",
      "Epoch 513/1000\n",
      " - 21s - loss: 0.0200 - categorical_accuracy: 0.8632\n",
      "Epoch 514/1000\n",
      " - 21s - loss: 0.0196 - categorical_accuracy: 0.8647\n",
      "Epoch 515/1000\n",
      " - 21s - loss: 0.0198 - categorical_accuracy: 0.8654\n",
      "Epoch 516/1000\n",
      " - 21s - loss: 0.0197 - categorical_accuracy: 0.8657\n",
      "Epoch 517/1000\n",
      " - 21s - loss: 0.0191 - categorical_accuracy: 0.8690\n",
      "Epoch 518/1000\n",
      " - 21s - loss: 0.0192 - categorical_accuracy: 0.8696\n",
      "Epoch 519/1000\n",
      " - 21s - loss: 0.0192 - categorical_accuracy: 0.8701\n",
      "Epoch 520/1000\n",
      " - 21s - loss: 0.0194 - categorical_accuracy: 0.8683\n",
      "Epoch 521/1000\n",
      " - 21s - loss: 0.0192 - categorical_accuracy: 0.8720\n",
      "Epoch 522/1000\n",
      " - 21s - loss: 0.0192 - categorical_accuracy: 0.8703\n",
      "Epoch 523/1000\n",
      " - 21s - loss: 0.0190 - categorical_accuracy: 0.8689\n",
      "Epoch 524/1000\n",
      " - 21s - loss: 0.0194 - categorical_accuracy: 0.8682\n",
      "Epoch 525/1000\n",
      " - 21s - loss: 0.0187 - categorical_accuracy: 0.8739\n",
      "Epoch 526/1000\n",
      " - 21s - loss: 0.0192 - categorical_accuracy: 0.8722\n",
      "Epoch 527/1000\n",
      " - 21s - loss: 0.0190 - categorical_accuracy: 0.8661\n",
      "Epoch 528/1000\n",
      " - 21s - loss: 0.0187 - categorical_accuracy: 0.8735\n",
      "Epoch 529/1000\n",
      " - 21s - loss: 0.0188 - categorical_accuracy: 0.8743\n",
      "Epoch 530/1000\n",
      " - 21s - loss: 0.0189 - categorical_accuracy: 0.8721\n",
      "Epoch 531/1000\n",
      " - 21s - loss: 0.0188 - categorical_accuracy: 0.8720\n",
      "Epoch 532/1000\n",
      " - 21s - loss: 0.0189 - categorical_accuracy: 0.8693\n",
      "Epoch 533/1000\n",
      " - 21s - loss: 0.0184 - categorical_accuracy: 0.8783\n",
      "Epoch 534/1000\n",
      " - 21s - loss: 0.0185 - categorical_accuracy: 0.8739\n",
      "Epoch 535/1000\n",
      " - 21s - loss: 0.0185 - categorical_accuracy: 0.8765\n",
      "Epoch 536/1000\n",
      " - 21s - loss: 0.0185 - categorical_accuracy: 0.8718\n",
      "Epoch 537/1000\n",
      " - 21s - loss: 0.0186 - categorical_accuracy: 0.8722\n",
      "Epoch 538/1000\n",
      " - 21s - loss: 0.0181 - categorical_accuracy: 0.8764\n",
      "Epoch 539/1000\n",
      " - 21s - loss: 0.0180 - categorical_accuracy: 0.8786\n",
      "Epoch 540/1000\n",
      " - 21s - loss: 0.0186 - categorical_accuracy: 0.8738\n",
      "Epoch 541/1000\n",
      " - 21s - loss: 0.0183 - categorical_accuracy: 0.8774\n",
      "Epoch 542/1000\n",
      " - 21s - loss: 0.0180 - categorical_accuracy: 0.8779\n",
      "Epoch 543/1000\n",
      " - 21s - loss: 0.0182 - categorical_accuracy: 0.8800\n",
      "Epoch 544/1000\n",
      " - 21s - loss: 0.0182 - categorical_accuracy: 0.8760\n",
      "Epoch 545/1000\n",
      " - 21s - loss: 0.0185 - categorical_accuracy: 0.8742\n",
      "Epoch 546/1000\n",
      " - 21s - loss: 0.0183 - categorical_accuracy: 0.8751\n",
      "Epoch 547/1000\n",
      " - 21s - loss: 0.0174 - categorical_accuracy: 0.8822\n",
      "Epoch 548/1000\n",
      " - 21s - loss: 0.0179 - categorical_accuracy: 0.8782\n",
      "Epoch 549/1000\n",
      " - 21s - loss: 0.0179 - categorical_accuracy: 0.8817\n",
      "Epoch 550/1000\n",
      " - 21s - loss: 0.0179 - categorical_accuracy: 0.8780\n",
      "Epoch 551/1000\n",
      " - 21s - loss: 0.0176 - categorical_accuracy: 0.8805\n",
      "Epoch 552/1000\n",
      " - 21s - loss: 0.0175 - categorical_accuracy: 0.8832\n",
      "Epoch 553/1000\n",
      " - 21s - loss: 0.0175 - categorical_accuracy: 0.8800\n",
      "Epoch 554/1000\n",
      " - 21s - loss: 0.0174 - categorical_accuracy: 0.8836\n",
      "Epoch 555/1000\n",
      " - 21s - loss: 0.0173 - categorical_accuracy: 0.8848\n",
      "Epoch 556/1000\n",
      " - 21s - loss: 0.0171 - categorical_accuracy: 0.8841\n",
      "Epoch 557/1000\n",
      " - 21s - loss: 0.0173 - categorical_accuracy: 0.8804\n",
      "Epoch 558/1000\n",
      " - 21s - loss: 0.0173 - categorical_accuracy: 0.8850\n",
      "Epoch 559/1000\n",
      " - 21s - loss: 0.0173 - categorical_accuracy: 0.8847\n",
      "Epoch 560/1000\n",
      " - 21s - loss: 0.0174 - categorical_accuracy: 0.8833\n",
      "Epoch 561/1000\n",
      " - 21s - loss: 0.0170 - categorical_accuracy: 0.8883\n",
      "Epoch 562/1000\n",
      " - 21s - loss: 0.0171 - categorical_accuracy: 0.8823\n",
      "Epoch 563/1000\n",
      " - 21s - loss: 0.0172 - categorical_accuracy: 0.8857\n",
      "Epoch 564/1000\n",
      " - 21s - loss: 0.0169 - categorical_accuracy: 0.8853\n",
      "Epoch 565/1000\n",
      " - 21s - loss: 0.0170 - categorical_accuracy: 0.8858\n",
      "Epoch 566/1000\n",
      " - 21s - loss: 0.0171 - categorical_accuracy: 0.8853\n",
      "Epoch 567/1000\n",
      " - 21s - loss: 0.0168 - categorical_accuracy: 0.8873\n",
      "Epoch 568/1000\n",
      " - 21s - loss: 0.0168 - categorical_accuracy: 0.8866\n",
      "Epoch 569/1000\n",
      " - 21s - loss: 0.0168 - categorical_accuracy: 0.8872\n",
      "Epoch 570/1000\n",
      " - 21s - loss: 0.0169 - categorical_accuracy: 0.8848\n",
      "Epoch 571/1000\n",
      " - 21s - loss: 0.0170 - categorical_accuracy: 0.8873\n",
      "Epoch 572/1000\n",
      " - 21s - loss: 0.0166 - categorical_accuracy: 0.8880\n",
      "Epoch 573/1000\n",
      " - 21s - loss: 0.0168 - categorical_accuracy: 0.8854\n",
      "Epoch 574/1000\n",
      " - 21s - loss: 0.0160 - categorical_accuracy: 0.8948\n",
      "Epoch 575/1000\n",
      " - 21s - loss: 0.0164 - categorical_accuracy: 0.8875\n",
      "Epoch 576/1000\n",
      " - 21s - loss: 0.0165 - categorical_accuracy: 0.8907\n",
      "Epoch 577/1000\n",
      " - 21s - loss: 0.0165 - categorical_accuracy: 0.8900\n",
      "Epoch 578/1000\n",
      " - 21s - loss: 0.0165 - categorical_accuracy: 0.8875\n",
      "Epoch 579/1000\n",
      " - 21s - loss: 0.0164 - categorical_accuracy: 0.8893\n",
      "Epoch 580/1000\n",
      " - 21s - loss: 0.0160 - categorical_accuracy: 0.8955\n",
      "Epoch 581/1000\n",
      " - 21s - loss: 0.0161 - categorical_accuracy: 0.8923\n",
      "Epoch 582/1000\n",
      " - 21s - loss: 0.0164 - categorical_accuracy: 0.8861\n",
      "Epoch 583/1000\n",
      " - 21s - loss: 0.0160 - categorical_accuracy: 0.8940\n",
      "Epoch 584/1000\n",
      " - 21s - loss: 0.0159 - categorical_accuracy: 0.8918\n",
      "Epoch 585/1000\n",
      " - 21s - loss: 0.0162 - categorical_accuracy: 0.8889\n",
      "Epoch 586/1000\n",
      " - 21s - loss: 0.0157 - categorical_accuracy: 0.8951\n",
      "Epoch 587/1000\n",
      " - 21s - loss: 0.0165 - categorical_accuracy: 0.8912\n",
      "Epoch 588/1000\n",
      " - 21s - loss: 0.0159 - categorical_accuracy: 0.8929\n",
      "Epoch 589/1000\n",
      " - 21s - loss: 0.0160 - categorical_accuracy: 0.8951\n",
      "Epoch 590/1000\n",
      " - 21s - loss: 0.0159 - categorical_accuracy: 0.8920\n",
      "Epoch 591/1000\n",
      " - 21s - loss: 0.0156 - categorical_accuracy: 0.8968\n",
      "Epoch 592/1000\n",
      " - 21s - loss: 0.0161 - categorical_accuracy: 0.8886\n",
      "Epoch 593/1000\n",
      " - 21s - loss: 0.0159 - categorical_accuracy: 0.8934\n",
      "Epoch 594/1000\n",
      " - 21s - loss: 0.0154 - categorical_accuracy: 0.8991\n",
      "Epoch 595/1000\n",
      " - 21s - loss: 0.0161 - categorical_accuracy: 0.8915\n",
      "Epoch 596/1000\n",
      " - 21s - loss: 0.0159 - categorical_accuracy: 0.8919\n",
      "Epoch 597/1000\n",
      " - 21s - loss: 0.0156 - categorical_accuracy: 0.8944\n",
      "Epoch 598/1000\n",
      " - 21s - loss: 0.0152 - categorical_accuracy: 0.8962\n",
      "Epoch 599/1000\n",
      " - 21s - loss: 0.0155 - categorical_accuracy: 0.8943\n",
      "Epoch 600/1000\n",
      " - 21s - loss: 0.0153 - categorical_accuracy: 0.8980\n",
      "Epoch 601/1000\n",
      " - 21s - loss: 0.0153 - categorical_accuracy: 0.8994\n",
      "Epoch 602/1000\n",
      " - 21s - loss: 0.0155 - categorical_accuracy: 0.8950\n",
      "Epoch 603/1000\n",
      " - 21s - loss: 0.0156 - categorical_accuracy: 0.8959\n",
      "Epoch 604/1000\n",
      " - 21s - loss: 0.0153 - categorical_accuracy: 0.8988\n",
      "Epoch 605/1000\n",
      " - 21s - loss: 0.0151 - categorical_accuracy: 0.8962\n",
      "Epoch 606/1000\n",
      " - 21s - loss: 0.0151 - categorical_accuracy: 0.8980\n",
      "Epoch 607/1000\n",
      " - 21s - loss: 0.0153 - categorical_accuracy: 0.8979\n",
      "Epoch 608/1000\n",
      " - 21s - loss: 0.0151 - categorical_accuracy: 0.8999\n",
      "Epoch 609/1000\n",
      " - 21s - loss: 0.0149 - categorical_accuracy: 0.8994\n",
      "Epoch 610/1000\n",
      " - 21s - loss: 0.0148 - categorical_accuracy: 0.9033\n",
      "Epoch 611/1000\n",
      " - 21s - loss: 0.0150 - categorical_accuracy: 0.9004\n",
      "Epoch 612/1000\n",
      " - 21s - loss: 0.0149 - categorical_accuracy: 0.8993\n",
      "Epoch 613/1000\n",
      " - 21s - loss: 0.0148 - categorical_accuracy: 0.9001\n",
      "Epoch 614/1000\n",
      " - 21s - loss: 0.0145 - categorical_accuracy: 0.9024\n",
      "Epoch 615/1000\n",
      " - 21s - loss: 0.0142 - categorical_accuracy: 0.9049\n",
      "Epoch 616/1000\n",
      " - 21s - loss: 0.0152 - categorical_accuracy: 0.8976\n",
      "Epoch 617/1000\n",
      " - 21s - loss: 0.0145 - categorical_accuracy: 0.9041\n",
      "Epoch 618/1000\n",
      " - 21s - loss: 0.0146 - categorical_accuracy: 0.9033\n",
      "Epoch 619/1000\n",
      " - 21s - loss: 0.0143 - categorical_accuracy: 0.9042\n",
      "Epoch 620/1000\n",
      " - 21s - loss: 0.0143 - categorical_accuracy: 0.9059\n",
      "Epoch 621/1000\n",
      " - 21s - loss: 0.0152 - categorical_accuracy: 0.8993\n",
      "Epoch 622/1000\n",
      " - 21s - loss: 0.0145 - categorical_accuracy: 0.9019\n",
      "Epoch 623/1000\n",
      " - 21s - loss: 0.0147 - categorical_accuracy: 0.9011\n",
      "Epoch 624/1000\n",
      " - 21s - loss: 0.0144 - categorical_accuracy: 0.9076\n",
      "Epoch 625/1000\n",
      " - 21s - loss: 0.0145 - categorical_accuracy: 0.9048\n",
      "Epoch 626/1000\n",
      " - 21s - loss: 0.0140 - categorical_accuracy: 0.9078\n",
      "Epoch 627/1000\n",
      " - 21s - loss: 0.0142 - categorical_accuracy: 0.9048\n",
      "Epoch 628/1000\n",
      " - 21s - loss: 0.0139 - categorical_accuracy: 0.9077\n",
      "Epoch 629/1000\n",
      " - 21s - loss: 0.0140 - categorical_accuracy: 0.9078\n",
      "Epoch 630/1000\n",
      " - 21s - loss: 0.0142 - categorical_accuracy: 0.9060\n",
      "Epoch 631/1000\n",
      " - 21s - loss: 0.0140 - categorical_accuracy: 0.9087\n",
      "Epoch 632/1000\n",
      " - 21s - loss: 0.0139 - categorical_accuracy: 0.9080\n",
      "Epoch 633/1000\n",
      " - 21s - loss: 0.0140 - categorical_accuracy: 0.9042\n",
      "Epoch 634/1000\n",
      " - 21s - loss: 0.0138 - categorical_accuracy: 0.9105\n",
      "Epoch 635/1000\n",
      " - 21s - loss: 0.0137 - categorical_accuracy: 0.9087\n",
      "Epoch 636/1000\n",
      " - 21s - loss: 0.0139 - categorical_accuracy: 0.9087\n",
      "Epoch 637/1000\n",
      " - 21s - loss: 0.0136 - categorical_accuracy: 0.9108\n",
      "Epoch 638/1000\n",
      " - 21s - loss: 0.0137 - categorical_accuracy: 0.9101\n",
      "Epoch 639/1000\n",
      " - 21s - loss: 0.0137 - categorical_accuracy: 0.9066\n",
      "Epoch 640/1000\n",
      " - 21s - loss: 0.0135 - categorical_accuracy: 0.9081\n",
      "Epoch 641/1000\n",
      " - 21s - loss: 0.0138 - categorical_accuracy: 0.9073\n",
      "Epoch 642/1000\n",
      " - 21s - loss: 0.0136 - categorical_accuracy: 0.9105\n",
      "Epoch 643/1000\n",
      " - 21s - loss: 0.0132 - categorical_accuracy: 0.9126\n",
      "Epoch 644/1000\n",
      " - 21s - loss: 0.0138 - categorical_accuracy: 0.9080\n",
      "Epoch 645/1000\n",
      " - 21s - loss: 0.0137 - categorical_accuracy: 0.9072\n",
      "Epoch 646/1000\n",
      " - 21s - loss: 0.0136 - categorical_accuracy: 0.9112\n",
      "Epoch 647/1000\n",
      " - 21s - loss: 0.0136 - categorical_accuracy: 0.9095\n",
      "Epoch 648/1000\n",
      " - 21s - loss: 0.0131 - categorical_accuracy: 0.9124\n",
      "Epoch 649/1000\n",
      " - 21s - loss: 0.0133 - categorical_accuracy: 0.9119\n",
      "Epoch 650/1000\n",
      " - 21s - loss: 0.0133 - categorical_accuracy: 0.9117\n",
      "Epoch 651/1000\n",
      " - 21s - loss: 0.0132 - categorical_accuracy: 0.9134\n",
      "Epoch 652/1000\n",
      " - 21s - loss: 0.0133 - categorical_accuracy: 0.9110\n",
      "Epoch 653/1000\n",
      " - 21s - loss: 0.0132 - categorical_accuracy: 0.9105\n",
      "Epoch 654/1000\n",
      " - 21s - loss: 0.0131 - categorical_accuracy: 0.9139\n",
      "Epoch 655/1000\n",
      " - 21s - loss: 0.0134 - categorical_accuracy: 0.9101\n",
      "Epoch 656/1000\n",
      " - 21s - loss: 0.0136 - categorical_accuracy: 0.9078\n",
      "Epoch 657/1000\n",
      " - 21s - loss: 0.0135 - categorical_accuracy: 0.9085\n",
      "Epoch 658/1000\n",
      " - 21s - loss: 0.0133 - categorical_accuracy: 0.9130\n",
      "Epoch 659/1000\n",
      " - 21s - loss: 0.0127 - categorical_accuracy: 0.9144\n",
      "Epoch 660/1000\n",
      " - 21s - loss: 0.0131 - categorical_accuracy: 0.9112\n",
      "Epoch 661/1000\n",
      " - 21s - loss: 0.0128 - categorical_accuracy: 0.9169\n",
      "Epoch 662/1000\n",
      " - 21s - loss: 0.0130 - categorical_accuracy: 0.9138\n",
      "Epoch 663/1000\n",
      " - 21s - loss: 0.0129 - categorical_accuracy: 0.9160\n",
      "Epoch 664/1000\n",
      " - 21s - loss: 0.0126 - categorical_accuracy: 0.9153\n",
      "Epoch 665/1000\n",
      " - 21s - loss: 0.0126 - categorical_accuracy: 0.9175\n",
      "Epoch 666/1000\n",
      " - 21s - loss: 0.0128 - categorical_accuracy: 0.9131\n",
      "Epoch 667/1000\n",
      " - 21s - loss: 0.0126 - categorical_accuracy: 0.9170\n",
      "Epoch 668/1000\n",
      " - 21s - loss: 0.0127 - categorical_accuracy: 0.9180\n",
      "Epoch 669/1000\n",
      " - 21s - loss: 0.0129 - categorical_accuracy: 0.9128\n",
      "Epoch 670/1000\n",
      " - 21s - loss: 0.0122 - categorical_accuracy: 0.9181\n",
      "Epoch 671/1000\n",
      " - 21s - loss: 0.0122 - categorical_accuracy: 0.9223\n",
      "Epoch 672/1000\n",
      " - 21s - loss: 0.0126 - categorical_accuracy: 0.9180\n",
      "Epoch 673/1000\n",
      " - 21s - loss: 0.0124 - categorical_accuracy: 0.9160\n",
      "Epoch 674/1000\n",
      " - 21s - loss: 0.0121 - categorical_accuracy: 0.9211\n",
      "Epoch 675/1000\n",
      " - 21s - loss: 0.0124 - categorical_accuracy: 0.9177\n",
      "Epoch 676/1000\n",
      " - 21s - loss: 0.0125 - categorical_accuracy: 0.9167\n",
      "Epoch 677/1000\n",
      " - 21s - loss: 0.0124 - categorical_accuracy: 0.9189\n",
      "Epoch 678/1000\n",
      " - 21s - loss: 0.0123 - categorical_accuracy: 0.9199\n",
      "Epoch 679/1000\n",
      " - 21s - loss: 0.0125 - categorical_accuracy: 0.9184\n",
      "Epoch 680/1000\n",
      " - 21s - loss: 0.0122 - categorical_accuracy: 0.9171\n",
      "Epoch 681/1000\n",
      " - 21s - loss: 0.0120 - categorical_accuracy: 0.9193\n",
      "Epoch 682/1000\n",
      " - 21s - loss: 0.0122 - categorical_accuracy: 0.9189\n",
      "Epoch 683/1000\n",
      " - 21s - loss: 0.0127 - categorical_accuracy: 0.9155\n",
      "Epoch 684/1000\n",
      " - 21s - loss: 0.0122 - categorical_accuracy: 0.9178\n",
      "Epoch 685/1000\n",
      " - 21s - loss: 0.0122 - categorical_accuracy: 0.9191\n",
      "Epoch 686/1000\n",
      " - 21s - loss: 0.0123 - categorical_accuracy: 0.9187\n",
      "Epoch 687/1000\n",
      " - 21s - loss: 0.0118 - categorical_accuracy: 0.9232\n",
      "Epoch 688/1000\n",
      " - 21s - loss: 0.0116 - categorical_accuracy: 0.9253\n",
      "Epoch 689/1000\n",
      " - 21s - loss: 0.0118 - categorical_accuracy: 0.9198\n",
      "Epoch 690/1000\n",
      " - 21s - loss: 0.0121 - categorical_accuracy: 0.9217\n",
      "Epoch 691/1000\n",
      " - 21s - loss: 0.0118 - categorical_accuracy: 0.9234\n",
      "Epoch 692/1000\n",
      " - 21s - loss: 0.0117 - categorical_accuracy: 0.9227\n",
      "Epoch 693/1000\n",
      " - 21s - loss: 0.0114 - categorical_accuracy: 0.9256\n",
      "Epoch 694/1000\n",
      " - 21s - loss: 0.0115 - categorical_accuracy: 0.9245\n",
      "Epoch 695/1000\n",
      " - 21s - loss: 0.0116 - categorical_accuracy: 0.9239\n",
      "Epoch 696/1000\n",
      " - 21s - loss: 0.0121 - categorical_accuracy: 0.9223\n",
      "Epoch 697/1000\n",
      " - 21s - loss: 0.0117 - categorical_accuracy: 0.9229\n",
      "Epoch 698/1000\n",
      " - 21s - loss: 0.0113 - categorical_accuracy: 0.9239\n",
      "Epoch 699/1000\n",
      " - 21s - loss: 0.0115 - categorical_accuracy: 0.9261\n",
      "Epoch 700/1000\n",
      " - 21s - loss: 0.0112 - categorical_accuracy: 0.9293\n",
      "Epoch 701/1000\n",
      " - 21s - loss: 0.0112 - categorical_accuracy: 0.9272\n",
      "Epoch 702/1000\n",
      " - 21s - loss: 0.0114 - categorical_accuracy: 0.9250\n",
      "Epoch 703/1000\n",
      " - 21s - loss: 0.0115 - categorical_accuracy: 0.9266\n",
      "Epoch 704/1000\n",
      " - 21s - loss: 0.0115 - categorical_accuracy: 0.9220\n",
      "Epoch 705/1000\n",
      " - 21s - loss: 0.0112 - categorical_accuracy: 0.9286\n",
      "Epoch 706/1000\n",
      " - 21s - loss: 0.0111 - categorical_accuracy: 0.9264\n",
      "Epoch 707/1000\n",
      " - 21s - loss: 0.0113 - categorical_accuracy: 0.9252\n",
      "Epoch 708/1000\n",
      " - 21s - loss: 0.0110 - categorical_accuracy: 0.9304\n",
      "Epoch 709/1000\n",
      " - 21s - loss: 0.0117 - categorical_accuracy: 0.9243\n",
      "Epoch 710/1000\n",
      " - 21s - loss: 0.0108 - categorical_accuracy: 0.9303\n",
      "Epoch 711/1000\n",
      " - 21s - loss: 0.0111 - categorical_accuracy: 0.9275\n",
      "Epoch 712/1000\n",
      " - 21s - loss: 0.0107 - categorical_accuracy: 0.9311\n",
      "Epoch 713/1000\n",
      " - 21s - loss: 0.0116 - categorical_accuracy: 0.9218\n",
      "Epoch 714/1000\n",
      " - 21s - loss: 0.0112 - categorical_accuracy: 0.9281\n",
      "Epoch 715/1000\n",
      " - 21s - loss: 0.0110 - categorical_accuracy: 0.9270\n",
      "Epoch 716/1000\n",
      " - 21s - loss: 0.0115 - categorical_accuracy: 0.9238\n",
      "Epoch 717/1000\n",
      " - 21s - loss: 0.0108 - categorical_accuracy: 0.9293\n",
      "Epoch 718/1000\n",
      " - 21s - loss: 0.0108 - categorical_accuracy: 0.9292\n",
      "Epoch 719/1000\n",
      " - 21s - loss: 0.0106 - categorical_accuracy: 0.9308\n",
      "Epoch 720/1000\n",
      " - 21s - loss: 0.0111 - categorical_accuracy: 0.9277\n",
      "Epoch 721/1000\n",
      " - 21s - loss: 0.0109 - categorical_accuracy: 0.9286\n",
      "Epoch 722/1000\n",
      " - 21s - loss: 0.0111 - categorical_accuracy: 0.9275\n",
      "Epoch 723/1000\n",
      " - 21s - loss: 0.0110 - categorical_accuracy: 0.9281\n",
      "Epoch 724/1000\n",
      " - 21s - loss: 0.0106 - categorical_accuracy: 0.9307\n",
      "Epoch 725/1000\n",
      " - 21s - loss: 0.0110 - categorical_accuracy: 0.9270\n",
      "Epoch 726/1000\n",
      " - 21s - loss: 0.0106 - categorical_accuracy: 0.9326\n",
      "Epoch 727/1000\n",
      " - 21s - loss: 0.0105 - categorical_accuracy: 0.9296\n",
      "Epoch 728/1000\n",
      " - 21s - loss: 0.0109 - categorical_accuracy: 0.9282\n",
      "Epoch 729/1000\n",
      " - 21s - loss: 0.0107 - categorical_accuracy: 0.9288\n",
      "Epoch 730/1000\n",
      " - 21s - loss: 0.0107 - categorical_accuracy: 0.9299\n",
      "Epoch 731/1000\n",
      " - 21s - loss: 0.0105 - categorical_accuracy: 0.9315\n",
      "Epoch 732/1000\n",
      " - 21s - loss: 0.0107 - categorical_accuracy: 0.9313\n",
      "Epoch 733/1000\n",
      " - 21s - loss: 0.0109 - categorical_accuracy: 0.9288\n",
      "Epoch 734/1000\n",
      " - 21s - loss: 0.0107 - categorical_accuracy: 0.9286\n",
      "Epoch 735/1000\n",
      " - 21s - loss: 0.0103 - categorical_accuracy: 0.9340\n",
      "Epoch 736/1000\n",
      " - 21s - loss: 0.0103 - categorical_accuracy: 0.9345\n",
      "Epoch 737/1000\n",
      " - 21s - loss: 0.0106 - categorical_accuracy: 0.9302\n",
      "Epoch 738/1000\n",
      " - 21s - loss: 0.0101 - categorical_accuracy: 0.9329\n",
      "Epoch 739/1000\n",
      " - 21s - loss: 0.0102 - categorical_accuracy: 0.9338\n",
      "Epoch 740/1000\n",
      " - 21s - loss: 0.0105 - categorical_accuracy: 0.9310\n",
      "Epoch 741/1000\n",
      " - 21s - loss: 0.0100 - categorical_accuracy: 0.9354\n",
      "Epoch 742/1000\n",
      " - 21s - loss: 0.0103 - categorical_accuracy: 0.9347\n",
      "Epoch 743/1000\n",
      " - 21s - loss: 0.0103 - categorical_accuracy: 0.9340\n",
      "Epoch 744/1000\n",
      " - 21s - loss: 0.0102 - categorical_accuracy: 0.9347\n",
      "Epoch 745/1000\n",
      " - 21s - loss: 0.0102 - categorical_accuracy: 0.9328\n",
      "Epoch 746/1000\n",
      " - 21s - loss: 0.0102 - categorical_accuracy: 0.9335\n",
      "Epoch 747/1000\n",
      " - 21s - loss: 0.0101 - categorical_accuracy: 0.9356\n",
      "Epoch 748/1000\n",
      " - 21s - loss: 0.0100 - categorical_accuracy: 0.9357\n",
      "Epoch 749/1000\n",
      " - 21s - loss: 0.0099 - categorical_accuracy: 0.9358\n",
      "Epoch 750/1000\n",
      " - 21s - loss: 0.0103 - categorical_accuracy: 0.9343\n",
      "Epoch 751/1000\n",
      " - 21s - loss: 0.0101 - categorical_accuracy: 0.9357\n",
      "Epoch 752/1000\n",
      " - 21s - loss: 0.0099 - categorical_accuracy: 0.9357\n",
      "Epoch 753/1000\n",
      " - 21s - loss: 0.0101 - categorical_accuracy: 0.9321\n",
      "Epoch 754/1000\n",
      " - 21s - loss: 0.0102 - categorical_accuracy: 0.9333\n",
      "Epoch 755/1000\n",
      " - 21s - loss: 0.0097 - categorical_accuracy: 0.9372\n",
      "Epoch 756/1000\n",
      " - 21s - loss: 0.0100 - categorical_accuracy: 0.9347\n",
      "Epoch 757/1000\n",
      " - 21s - loss: 0.0104 - categorical_accuracy: 0.9295\n",
      "Epoch 758/1000\n",
      " - 21s - loss: 0.0100 - categorical_accuracy: 0.9336\n",
      "Epoch 759/1000\n",
      " - 21s - loss: 0.0096 - categorical_accuracy: 0.9390\n",
      "Epoch 760/1000\n",
      " - 21s - loss: 0.0101 - categorical_accuracy: 0.9353\n",
      "Epoch 761/1000\n",
      " - 21s - loss: 0.0097 - categorical_accuracy: 0.9385\n",
      "Epoch 762/1000\n",
      " - 21s - loss: 0.0092 - categorical_accuracy: 0.9403\n",
      "Epoch 763/1000\n",
      " - 21s - loss: 0.0096 - categorical_accuracy: 0.9383\n",
      "Epoch 764/1000\n",
      " - 21s - loss: 0.0097 - categorical_accuracy: 0.9371\n",
      "Epoch 765/1000\n",
      " - 21s - loss: 0.0097 - categorical_accuracy: 0.9367\n",
      "Epoch 766/1000\n",
      " - 21s - loss: 0.0099 - categorical_accuracy: 0.9347\n",
      "Epoch 767/1000\n",
      " - 21s - loss: 0.0098 - categorical_accuracy: 0.9376\n",
      "Epoch 768/1000\n",
      " - 21s - loss: 0.0095 - categorical_accuracy: 0.9386\n",
      "Epoch 769/1000\n",
      " - 21s - loss: 0.0096 - categorical_accuracy: 0.9374\n",
      "Epoch 770/1000\n",
      " - 21s - loss: 0.0096 - categorical_accuracy: 0.9387\n",
      "Epoch 771/1000\n",
      " - 21s - loss: 0.0094 - categorical_accuracy: 0.9382\n",
      "Epoch 772/1000\n",
      " - 21s - loss: 0.0092 - categorical_accuracy: 0.9426\n",
      "Epoch 773/1000\n",
      " - 21s - loss: 0.0094 - categorical_accuracy: 0.9414\n",
      "Epoch 774/1000\n",
      " - 21s - loss: 0.0094 - categorical_accuracy: 0.9394\n",
      "Epoch 775/1000\n",
      " - 21s - loss: 0.0090 - categorical_accuracy: 0.9444\n",
      "Epoch 776/1000\n",
      " - 21s - loss: 0.0094 - categorical_accuracy: 0.9389\n",
      "Epoch 777/1000\n",
      " - 21s - loss: 0.0091 - categorical_accuracy: 0.9392\n",
      "Epoch 778/1000\n",
      " - 21s - loss: 0.0095 - categorical_accuracy: 0.9385\n",
      "Epoch 779/1000\n",
      " - 21s - loss: 0.0092 - categorical_accuracy: 0.9390\n",
      "Epoch 780/1000\n",
      " - 21s - loss: 0.0091 - categorical_accuracy: 0.9415\n",
      "Epoch 781/1000\n",
      " - 21s - loss: 0.0090 - categorical_accuracy: 0.9439\n",
      "Epoch 782/1000\n",
      " - 21s - loss: 0.0094 - categorical_accuracy: 0.9381\n",
      "Epoch 783/1000\n",
      " - 21s - loss: 0.0091 - categorical_accuracy: 0.9421\n",
      "Epoch 784/1000\n",
      " - 21s - loss: 0.0090 - categorical_accuracy: 0.9415\n",
      "Epoch 785/1000\n",
      " - 21s - loss: 0.0089 - categorical_accuracy: 0.9440\n",
      "Epoch 786/1000\n",
      " - 21s - loss: 0.0092 - categorical_accuracy: 0.9385\n",
      "Epoch 787/1000\n",
      " - 21s - loss: 0.0089 - categorical_accuracy: 0.9429\n",
      "Epoch 788/1000\n",
      " - 21s - loss: 0.0088 - categorical_accuracy: 0.9442\n",
      "Epoch 789/1000\n",
      " - 21s - loss: 0.0090 - categorical_accuracy: 0.9419\n",
      "Epoch 790/1000\n",
      " - 21s - loss: 0.0090 - categorical_accuracy: 0.9418\n",
      "Epoch 791/1000\n",
      " - 21s - loss: 0.0090 - categorical_accuracy: 0.9422\n",
      "Epoch 792/1000\n",
      " - 21s - loss: 0.0089 - categorical_accuracy: 0.9419\n",
      "Epoch 793/1000\n",
      " - 21s - loss: 0.0088 - categorical_accuracy: 0.9472\n",
      "Epoch 794/1000\n",
      " - 21s - loss: 0.0090 - categorical_accuracy: 0.9396\n",
      "Epoch 795/1000\n",
      " - 21s - loss: 0.0088 - categorical_accuracy: 0.9426\n",
      "Epoch 796/1000\n",
      " - 21s - loss: 0.0083 - categorical_accuracy: 0.9471\n",
      "Epoch 797/1000\n",
      " - 21s - loss: 0.0087 - categorical_accuracy: 0.9433\n",
      "Epoch 798/1000\n",
      " - 21s - loss: 0.0090 - categorical_accuracy: 0.9394\n",
      "Epoch 799/1000\n",
      " - 21s - loss: 0.0089 - categorical_accuracy: 0.9429\n",
      "Epoch 800/1000\n",
      " - 21s - loss: 0.0087 - categorical_accuracy: 0.9430\n",
      "Epoch 801/1000\n",
      " - 21s - loss: 0.0086 - categorical_accuracy: 0.9437\n",
      "Epoch 802/1000\n",
      " - 21s - loss: 0.0085 - categorical_accuracy: 0.9433\n",
      "Epoch 803/1000\n",
      " - 21s - loss: 0.0084 - categorical_accuracy: 0.9483\n",
      "Epoch 804/1000\n",
      " - 21s - loss: 0.0085 - categorical_accuracy: 0.9461\n",
      "Epoch 805/1000\n",
      " - 21s - loss: 0.0085 - categorical_accuracy: 0.9457\n",
      "Epoch 806/1000\n",
      " - 21s - loss: 0.0085 - categorical_accuracy: 0.9478\n",
      "Epoch 807/1000\n",
      " - 21s - loss: 0.0086 - categorical_accuracy: 0.9450\n",
      "Epoch 808/1000\n",
      " - 21s - loss: 0.0086 - categorical_accuracy: 0.9460\n",
      "Epoch 809/1000\n",
      " - 21s - loss: 0.0084 - categorical_accuracy: 0.9475\n",
      "Epoch 810/1000\n",
      " - 21s - loss: 0.0087 - categorical_accuracy: 0.9447\n",
      "Epoch 811/1000\n",
      " - 21s - loss: 0.0083 - categorical_accuracy: 0.9490\n",
      "Epoch 812/1000\n",
      " - 21s - loss: 0.0087 - categorical_accuracy: 0.9422\n",
      "Epoch 813/1000\n",
      " - 21s - loss: 0.0088 - categorical_accuracy: 0.9432\n",
      "Epoch 814/1000\n",
      " - 21s - loss: 0.0083 - categorical_accuracy: 0.9476\n",
      "Epoch 815/1000\n",
      " - 21s - loss: 0.0083 - categorical_accuracy: 0.9471\n",
      "Epoch 816/1000\n",
      " - 21s - loss: 0.0082 - categorical_accuracy: 0.9498\n",
      "Epoch 817/1000\n",
      " - 21s - loss: 0.0083 - categorical_accuracy: 0.9469\n",
      "Epoch 818/1000\n",
      " - 21s - loss: 0.0082 - categorical_accuracy: 0.9482\n",
      "Epoch 819/1000\n",
      " - 21s - loss: 0.0084 - categorical_accuracy: 0.9464\n",
      "Epoch 820/1000\n",
      " - 21s - loss: 0.0084 - categorical_accuracy: 0.9476\n",
      "Epoch 821/1000\n",
      " - 21s - loss: 0.0082 - categorical_accuracy: 0.9464\n",
      "Epoch 822/1000\n",
      " - 21s - loss: 0.0083 - categorical_accuracy: 0.9475\n",
      "Epoch 823/1000\n",
      " - 21s - loss: 0.0082 - categorical_accuracy: 0.9490\n",
      "Epoch 824/1000\n",
      " - 21s - loss: 0.0081 - categorical_accuracy: 0.9483\n",
      "Epoch 825/1000\n",
      " - 21s - loss: 0.0080 - categorical_accuracy: 0.9501\n",
      "Epoch 826/1000\n",
      " - 21s - loss: 0.0080 - categorical_accuracy: 0.9480\n",
      "Epoch 827/1000\n",
      " - 21s - loss: 0.0081 - categorical_accuracy: 0.9475\n",
      "Epoch 828/1000\n",
      " - 21s - loss: 0.0081 - categorical_accuracy: 0.9483\n",
      "Epoch 829/1000\n",
      " - 21s - loss: 0.0081 - categorical_accuracy: 0.9501\n",
      "Epoch 830/1000\n",
      " - 21s - loss: 0.0079 - categorical_accuracy: 0.9515\n",
      "Epoch 831/1000\n",
      " - 21s - loss: 0.0076 - categorical_accuracy: 0.9507\n",
      "Epoch 832/1000\n",
      " - 21s - loss: 0.0079 - categorical_accuracy: 0.9500\n",
      "Epoch 833/1000\n",
      " - 21s - loss: 0.0080 - categorical_accuracy: 0.9498\n",
      "Epoch 834/1000\n",
      " - 21s - loss: 0.0082 - categorical_accuracy: 0.9472\n",
      "Epoch 835/1000\n",
      " - 21s - loss: 0.0081 - categorical_accuracy: 0.9491\n",
      "Epoch 836/1000\n",
      " - 21s - loss: 0.0078 - categorical_accuracy: 0.9509\n",
      "Epoch 837/1000\n",
      " - 21s - loss: 0.0078 - categorical_accuracy: 0.9519\n",
      "Epoch 838/1000\n",
      " - 21s - loss: 0.0079 - categorical_accuracy: 0.9514\n",
      "Epoch 839/1000\n",
      " - 21s - loss: 0.0083 - categorical_accuracy: 0.9469\n",
      "Epoch 840/1000\n",
      " - 21s - loss: 0.0077 - categorical_accuracy: 0.9533\n",
      "Epoch 841/1000\n",
      " - 21s - loss: 0.0078 - categorical_accuracy: 0.9498\n",
      "Epoch 842/1000\n",
      " - 21s - loss: 0.0076 - categorical_accuracy: 0.9522\n",
      "Epoch 843/1000\n",
      " - 21s - loss: 0.0078 - categorical_accuracy: 0.9508\n",
      "Epoch 844/1000\n",
      " - 21s - loss: 0.0075 - categorical_accuracy: 0.9504\n",
      "Epoch 845/1000\n",
      " - 21s - loss: 0.0077 - categorical_accuracy: 0.9504\n",
      "Epoch 846/1000\n",
      " - 21s - loss: 0.0081 - categorical_accuracy: 0.9491\n",
      "Epoch 847/1000\n",
      " - 21s - loss: 0.0072 - categorical_accuracy: 0.9530\n",
      "Epoch 848/1000\n",
      " - 21s - loss: 0.0078 - categorical_accuracy: 0.9500\n",
      "Epoch 849/1000\n",
      " - 21s - loss: 0.0074 - categorical_accuracy: 0.9532\n",
      "Epoch 850/1000\n",
      " - 21s - loss: 0.0070 - categorical_accuracy: 0.9577\n",
      "Epoch 851/1000\n",
      " - 21s - loss: 0.0075 - categorical_accuracy: 0.9534\n",
      "Epoch 852/1000\n",
      " - 21s - loss: 0.0076 - categorical_accuracy: 0.9501\n",
      "Epoch 853/1000\n",
      " - 21s - loss: 0.0074 - categorical_accuracy: 0.9540\n",
      "Epoch 854/1000\n",
      " - 21s - loss: 0.0072 - categorical_accuracy: 0.9554\n",
      "Epoch 855/1000\n",
      " - 21s - loss: 0.0078 - categorical_accuracy: 0.9496\n",
      "Epoch 856/1000\n",
      " - 21s - loss: 0.0072 - categorical_accuracy: 0.9534\n",
      "Epoch 857/1000\n",
      " - 21s - loss: 0.0074 - categorical_accuracy: 0.9532\n",
      "Epoch 858/1000\n",
      " - 21s - loss: 0.0073 - categorical_accuracy: 0.9532\n",
      "Epoch 859/1000\n",
      " - 21s - loss: 0.0074 - categorical_accuracy: 0.9522\n",
      "Epoch 860/1000\n",
      " - 21s - loss: 0.0074 - categorical_accuracy: 0.9544\n",
      "Epoch 861/1000\n",
      " - 21s - loss: 0.0072 - categorical_accuracy: 0.9559\n",
      "Epoch 862/1000\n",
      " - 21s - loss: 0.0075 - categorical_accuracy: 0.9533\n",
      "Epoch 863/1000\n",
      " - 21s - loss: 0.0075 - categorical_accuracy: 0.9529\n",
      "Epoch 864/1000\n",
      " - 21s - loss: 0.0074 - categorical_accuracy: 0.9541\n",
      "Epoch 865/1000\n",
      " - 21s - loss: 0.0077 - categorical_accuracy: 0.9494\n",
      "Epoch 866/1000\n",
      " - 21s - loss: 0.0073 - categorical_accuracy: 0.9548\n",
      "Epoch 867/1000\n",
      " - 21s - loss: 0.0071 - categorical_accuracy: 0.9572\n",
      "Epoch 868/1000\n",
      " - 21s - loss: 0.0070 - categorical_accuracy: 0.9581\n",
      "Epoch 869/1000\n",
      " - 21s - loss: 0.0070 - categorical_accuracy: 0.9568\n",
      "Epoch 870/1000\n",
      " - 21s - loss: 0.0071 - categorical_accuracy: 0.9540\n",
      "Epoch 871/1000\n",
      " - 21s - loss: 0.0071 - categorical_accuracy: 0.9541\n",
      "Epoch 872/1000\n",
      " - 21s - loss: 0.0066 - categorical_accuracy: 0.9575\n",
      "Epoch 873/1000\n",
      " - 21s - loss: 0.0069 - categorical_accuracy: 0.9579\n",
      "Epoch 874/1000\n",
      " - 21s - loss: 0.0070 - categorical_accuracy: 0.9548\n",
      "Epoch 875/1000\n",
      " - 21s - loss: 0.0073 - categorical_accuracy: 0.9555\n",
      "Epoch 876/1000\n",
      " - 21s - loss: 0.0072 - categorical_accuracy: 0.9547\n",
      "Epoch 877/1000\n",
      " - 21s - loss: 0.0073 - categorical_accuracy: 0.9522\n",
      "Epoch 878/1000\n",
      " - 21s - loss: 0.0073 - categorical_accuracy: 0.9544\n",
      "Epoch 879/1000\n",
      " - 21s - loss: 0.0067 - categorical_accuracy: 0.9586\n",
      "Epoch 880/1000\n",
      " - 21s - loss: 0.0069 - categorical_accuracy: 0.9583\n",
      "Epoch 881/1000\n",
      " - 21s - loss: 0.0072 - categorical_accuracy: 0.9545\n",
      "Epoch 882/1000\n",
      " - 21s - loss: 0.0069 - categorical_accuracy: 0.9575\n",
      "Epoch 883/1000\n",
      " - 21s - loss: 0.0069 - categorical_accuracy: 0.9576\n",
      "Epoch 884/1000\n",
      " - 21s - loss: 0.0067 - categorical_accuracy: 0.9559\n",
      "Epoch 885/1000\n",
      " - 21s - loss: 0.0072 - categorical_accuracy: 0.9548\n",
      "Epoch 886/1000\n",
      " - 21s - loss: 0.0070 - categorical_accuracy: 0.9557\n",
      "Epoch 887/1000\n",
      " - 21s - loss: 0.0067 - categorical_accuracy: 0.9586\n",
      "Epoch 888/1000\n",
      " - 21s - loss: 0.0067 - categorical_accuracy: 0.9591\n",
      "Epoch 889/1000\n",
      " - 21s - loss: 0.0069 - categorical_accuracy: 0.9565\n",
      "Epoch 890/1000\n",
      " - 21s - loss: 0.0069 - categorical_accuracy: 0.9552\n",
      "Epoch 891/1000\n",
      " - 21s - loss: 0.0069 - categorical_accuracy: 0.9577\n",
      "Epoch 892/1000\n",
      " - 21s - loss: 0.0066 - categorical_accuracy: 0.9573\n",
      "Epoch 893/1000\n",
      " - 21s - loss: 0.0067 - categorical_accuracy: 0.9576\n",
      "Epoch 894/1000\n",
      " - 21s - loss: 0.0071 - categorical_accuracy: 0.9563\n",
      "Epoch 895/1000\n",
      " - 21s - loss: 0.0065 - categorical_accuracy: 0.9606\n",
      "Epoch 896/1000\n",
      " - 21s - loss: 0.0066 - categorical_accuracy: 0.9593\n",
      "Epoch 897/1000\n",
      " - 21s - loss: 0.0067 - categorical_accuracy: 0.9570\n",
      "Epoch 898/1000\n",
      " - 21s - loss: 0.0066 - categorical_accuracy: 0.9583\n",
      "Epoch 899/1000\n",
      " - 21s - loss: 0.0067 - categorical_accuracy: 0.9579\n",
      "Epoch 900/1000\n",
      " - 21s - loss: 0.0067 - categorical_accuracy: 0.9590\n",
      "Epoch 901/1000\n",
      " - 21s - loss: 0.0068 - categorical_accuracy: 0.9570\n",
      "Epoch 902/1000\n",
      " - 21s - loss: 0.0064 - categorical_accuracy: 0.9616\n",
      "Epoch 903/1000\n",
      " - 21s - loss: 0.0065 - categorical_accuracy: 0.9608\n",
      "Epoch 904/1000\n",
      " - 21s - loss: 0.0065 - categorical_accuracy: 0.9600\n",
      "Epoch 905/1000\n",
      " - 21s - loss: 0.0068 - categorical_accuracy: 0.9587\n",
      "Epoch 906/1000\n",
      " - 21s - loss: 0.0066 - categorical_accuracy: 0.9586\n",
      "Epoch 907/1000\n",
      " - 21s - loss: 0.0066 - categorical_accuracy: 0.9590\n",
      "Epoch 908/1000\n",
      " - 21s - loss: 0.0068 - categorical_accuracy: 0.9559\n",
      "Epoch 909/1000\n",
      " - 21s - loss: 0.0061 - categorical_accuracy: 0.9626\n",
      "Epoch 910/1000\n",
      " - 21s - loss: 0.0066 - categorical_accuracy: 0.9572\n",
      "Epoch 911/1000\n",
      " - 21s - loss: 0.0066 - categorical_accuracy: 0.9597\n",
      "Epoch 912/1000\n",
      " - 21s - loss: 0.0063 - categorical_accuracy: 0.9626\n",
      "Epoch 913/1000\n",
      " - 21s - loss: 0.0065 - categorical_accuracy: 0.9591\n",
      "Epoch 914/1000\n",
      " - 21s - loss: 0.0064 - categorical_accuracy: 0.9609\n",
      "Epoch 915/1000\n",
      " - 21s - loss: 0.0065 - categorical_accuracy: 0.9593\n",
      "Epoch 916/1000\n",
      " - 21s - loss: 0.0063 - categorical_accuracy: 0.9622\n",
      "Epoch 917/1000\n",
      " - 21s - loss: 0.0066 - categorical_accuracy: 0.9602\n",
      "Epoch 918/1000\n",
      " - 21s - loss: 0.0061 - categorical_accuracy: 0.9630\n",
      "Epoch 919/1000\n",
      " - 21s - loss: 0.0061 - categorical_accuracy: 0.9631\n",
      "Epoch 920/1000\n",
      " - 21s - loss: 0.0062 - categorical_accuracy: 0.9615\n",
      "Epoch 921/1000\n",
      " - 21s - loss: 0.0064 - categorical_accuracy: 0.9597\n",
      "Epoch 922/1000\n",
      " - 21s - loss: 0.0061 - categorical_accuracy: 0.9608\n",
      "Epoch 923/1000\n",
      " - 21s - loss: 0.0061 - categorical_accuracy: 0.9611\n",
      "Epoch 924/1000\n",
      " - 21s - loss: 0.0062 - categorical_accuracy: 0.9604\n",
      "Epoch 925/1000\n",
      " - 21s - loss: 0.0062 - categorical_accuracy: 0.9609\n",
      "Epoch 926/1000\n",
      " - 21s - loss: 0.0061 - categorical_accuracy: 0.9618\n",
      "Epoch 927/1000\n",
      " - 21s - loss: 0.0060 - categorical_accuracy: 0.9637\n",
      "Epoch 928/1000\n",
      " - 21s - loss: 0.0060 - categorical_accuracy: 0.9655\n",
      "Epoch 929/1000\n",
      " - 21s - loss: 0.0062 - categorical_accuracy: 0.9622\n",
      "Epoch 930/1000\n",
      " - 21s - loss: 0.0064 - categorical_accuracy: 0.9597\n",
      "Epoch 931/1000\n",
      " - 21s - loss: 0.0063 - categorical_accuracy: 0.9606\n",
      "Epoch 932/1000\n",
      " - 21s - loss: 0.0061 - categorical_accuracy: 0.9618\n",
      "Epoch 933/1000\n",
      " - 21s - loss: 0.0059 - categorical_accuracy: 0.9651\n",
      "Epoch 934/1000\n",
      " - 21s - loss: 0.0060 - categorical_accuracy: 0.9634\n",
      "Epoch 935/1000\n",
      " - 21s - loss: 0.0065 - categorical_accuracy: 0.9590\n",
      "Epoch 936/1000\n",
      " - 21s - loss: 0.0061 - categorical_accuracy: 0.9609\n",
      "Epoch 937/1000\n",
      " - 21s - loss: 0.0059 - categorical_accuracy: 0.9611\n",
      "Epoch 938/1000\n",
      " - 21s - loss: 0.0062 - categorical_accuracy: 0.9630\n",
      "Epoch 939/1000\n",
      " - 21s - loss: 0.0056 - categorical_accuracy: 0.9666\n",
      "Epoch 940/1000\n",
      " - 21s - loss: 0.0060 - categorical_accuracy: 0.9624\n",
      "Epoch 941/1000\n",
      " - 21s - loss: 0.0058 - categorical_accuracy: 0.9638\n",
      "Epoch 942/1000\n",
      " - 21s - loss: 0.0055 - categorical_accuracy: 0.9670\n",
      "Epoch 943/1000\n",
      " - 21s - loss: 0.0059 - categorical_accuracy: 0.9655\n",
      "Epoch 944/1000\n",
      " - 21s - loss: 0.0056 - categorical_accuracy: 0.9641\n",
      "Epoch 945/1000\n",
      " - 21s - loss: 0.0062 - categorical_accuracy: 0.9624\n",
      "Epoch 946/1000\n",
      " - 21s - loss: 0.0056 - categorical_accuracy: 0.9666\n",
      "Epoch 947/1000\n",
      " - 21s - loss: 0.0058 - categorical_accuracy: 0.9634\n",
      "Epoch 948/1000\n",
      " - 21s - loss: 0.0060 - categorical_accuracy: 0.9654\n",
      "Epoch 949/1000\n",
      " - 21s - loss: 0.0058 - categorical_accuracy: 0.9656\n",
      "Epoch 950/1000\n",
      " - 21s - loss: 0.0057 - categorical_accuracy: 0.9648\n",
      "Epoch 951/1000\n",
      " - 21s - loss: 0.0056 - categorical_accuracy: 0.9651\n",
      "Epoch 952/1000\n",
      " - 21s - loss: 0.0056 - categorical_accuracy: 0.9663\n",
      "Epoch 953/1000\n",
      " - 21s - loss: 0.0058 - categorical_accuracy: 0.9626\n",
      "Epoch 954/1000\n",
      " - 21s - loss: 0.0058 - categorical_accuracy: 0.9634\n",
      "Epoch 955/1000\n",
      " - 21s - loss: 0.0057 - categorical_accuracy: 0.9651\n",
      "Epoch 956/1000\n",
      " - 21s - loss: 0.0058 - categorical_accuracy: 0.9655\n",
      "Epoch 957/1000\n",
      " - 21s - loss: 0.0057 - categorical_accuracy: 0.9641\n",
      "Epoch 958/1000\n",
      " - 21s - loss: 0.0055 - categorical_accuracy: 0.9660\n",
      "Epoch 959/1000\n",
      " - 21s - loss: 0.0056 - categorical_accuracy: 0.9648\n",
      "Epoch 960/1000\n",
      " - 21s - loss: 0.0056 - categorical_accuracy: 0.9658\n",
      "Epoch 961/1000\n",
      " - 21s - loss: 0.0055 - categorical_accuracy: 0.9659\n",
      "Epoch 962/1000\n",
      " - 21s - loss: 0.0058 - categorical_accuracy: 0.9641\n",
      "Epoch 963/1000\n",
      " - 21s - loss: 0.0057 - categorical_accuracy: 0.9641\n",
      "Epoch 964/1000\n",
      " - 21s - loss: 0.0055 - categorical_accuracy: 0.9654\n",
      "Epoch 965/1000\n",
      " - 21s - loss: 0.0054 - categorical_accuracy: 0.9687\n",
      "Epoch 966/1000\n",
      " - 21s - loss: 0.0054 - categorical_accuracy: 0.9666\n",
      "Epoch 967/1000\n",
      " - 21s - loss: 0.0054 - categorical_accuracy: 0.9665\n",
      "Epoch 968/1000\n",
      " - 21s - loss: 0.0054 - categorical_accuracy: 0.9667\n",
      "Epoch 969/1000\n",
      " - 21s - loss: 0.0057 - categorical_accuracy: 0.9634\n",
      "Epoch 970/1000\n",
      " - 21s - loss: 0.0055 - categorical_accuracy: 0.9651\n",
      "Epoch 971/1000\n",
      " - 21s - loss: 0.0055 - categorical_accuracy: 0.9667\n",
      "Epoch 972/1000\n",
      " - 21s - loss: 0.0055 - categorical_accuracy: 0.9678\n",
      "Epoch 973/1000\n",
      " - 21s - loss: 0.0054 - categorical_accuracy: 0.9674\n",
      "Epoch 974/1000\n",
      " - 21s - loss: 0.0053 - categorical_accuracy: 0.9666\n",
      "Epoch 975/1000\n",
      " - 21s - loss: 0.0055 - categorical_accuracy: 0.9669\n",
      "Epoch 976/1000\n",
      " - 21s - loss: 0.0054 - categorical_accuracy: 0.9669\n",
      "Epoch 977/1000\n",
      " - 21s - loss: 0.0053 - categorical_accuracy: 0.9662\n",
      "Epoch 978/1000\n",
      " - 21s - loss: 0.0054 - categorical_accuracy: 0.9651\n",
      "Epoch 979/1000\n",
      " - 21s - loss: 0.0053 - categorical_accuracy: 0.9670\n",
      "Epoch 980/1000\n",
      " - 21s - loss: 0.0051 - categorical_accuracy: 0.9690\n",
      "Epoch 981/1000\n",
      " - 21s - loss: 0.0054 - categorical_accuracy: 0.9678\n",
      "Epoch 982/1000\n",
      " - 21s - loss: 0.0053 - categorical_accuracy: 0.9672\n",
      "Epoch 983/1000\n",
      " - 21s - loss: 0.0053 - categorical_accuracy: 0.9670\n",
      "Epoch 984/1000\n",
      " - 21s - loss: 0.0053 - categorical_accuracy: 0.9660\n",
      "Epoch 985/1000\n",
      " - 21s - loss: 0.0054 - categorical_accuracy: 0.9659\n",
      "Epoch 986/1000\n",
      " - 21s - loss: 0.0055 - categorical_accuracy: 0.9687\n",
      "Epoch 987/1000\n",
      " - 21s - loss: 0.0051 - categorical_accuracy: 0.9680\n",
      "Epoch 988/1000\n",
      " - 21s - loss: 0.0054 - categorical_accuracy: 0.9667\n",
      "Epoch 989/1000\n",
      " - 21s - loss: 0.0054 - categorical_accuracy: 0.9665\n",
      "Epoch 990/1000\n",
      " - 21s - loss: 0.0052 - categorical_accuracy: 0.9677\n",
      "Epoch 991/1000\n",
      " - 21s - loss: 0.0053 - categorical_accuracy: 0.9677\n",
      "Epoch 992/1000\n",
      " - 21s - loss: 0.0050 - categorical_accuracy: 0.9691\n",
      "Epoch 993/1000\n",
      " - 21s - loss: 0.0052 - categorical_accuracy: 0.9683\n",
      "Epoch 994/1000\n",
      " - 21s - loss: 0.0054 - categorical_accuracy: 0.9663\n",
      "Epoch 995/1000\n",
      " - 21s - loss: 0.0052 - categorical_accuracy: 0.9666\n",
      "Epoch 996/1000\n",
      " - 21s - loss: 0.0052 - categorical_accuracy: 0.9680\n",
      "Epoch 997/1000\n",
      " - 21s - loss: 0.0052 - categorical_accuracy: 0.9663\n",
      "Epoch 998/1000\n",
      " - 21s - loss: 0.0051 - categorical_accuracy: 0.9697\n",
      "Epoch 999/1000\n",
      " - 21s - loss: 0.0050 - categorical_accuracy: 0.9695\n",
      "Epoch 1000/1000\n",
      " - 21s - loss: 0.0048 - categorical_accuracy: 0.9703\n",
      "score: [0.0057648858075575495, 0.964678168296814]\n"
     ]
    }
   ],
   "source": [
    "# Train the model here\n",
    "\n",
    "model = alex() \n",
    "\n",
    "# Fit model on training data\n",
    "history_mask = model.fit(X_train, Y_train, batch_size = 64, epochs=1000, verbose=2)\n",
    "\n",
    "\n",
    "# Evaluate model on test data\n",
    "score = model.evaluate(X_test, Y_test, verbose=0)\n",
    "\n",
    "print(\"score: \"+str(score))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "lines_to_next_cell": 2,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys(['loss', 'categorical_accuracy'])\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot training accuracy or recall\n",
    "print(history_mask.history.keys())\n",
    "plt.plot(history_mask.history['categorical_accuracy']) # categorical_accuracy or loss\n",
    "#plt.title('Training set Recall')\n",
    "#plt.ylabel('Recall')\n",
    "#plt.xlabel('Epoch')\n",
    "plt.legend(['Train', 'Test'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Save model\n",
    "\n",
    "history_mask_2 = history_mask  # also history_mask_1\n",
    "model.save(\"model_005_97_1000_more_preprocess.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "jupytext": {
   "text_representation": {
    "extension": ".py",
    "format_name": "light",
    "format_version": "1.5",
    "jupytext_version": "1.3.0"
   }
  },
  "kernelspec": {
   "display_name": "Python 3.6 - AzureML",
   "language": "python",
   "name": "python3-azureml"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
